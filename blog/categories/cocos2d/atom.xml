<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cocos2d | 我是妖怪]]></title>
  <link href="http://dualface.github.com/blog/categories/cocos2d/atom.xml" rel="self"/>
  <link href="http://dualface.github.com/"/>
  <updated>2013-08-01T14:50:49+08:00</updated>
  <id>http://dualface.github.com/</id>
  <author>
    <name><![CDATA[YuLei Liao]]></name>
    <email><![CDATA[dualface@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[从 Flash 到 cocos2d-x]]></title>
    <link href="http://dualface.github.com/blog/2013/02/28/from-flash-to-quick/"/>
    <updated>2013-02-28T00:03:00+08:00</updated>
    <id>http://dualface.github.com/blog/2013/02/28/from-flash-to-quick</id>
    <content type="html"><![CDATA[<p>前言：写这篇文章的原因是朋友公司打算将一个页游产品转为手游，邀请我过去做了两天培训。所以我根据 Flash 团队反映的一些问题做了有针对性的阐述。</p>

<p>Flash 团队转入 cocos2d-x 架构，面对的大部分问题实际上都是“实施”细节，语言根本不是障碍。为了让整个内容更有条理性，我以 Flash 团队提出的问题整理了一个提纲。然后我会按照这个提纲逐步完善文章内容（这次保证不会太监 ^_<sup>）。</sup></p>

<p>阅读索引：</p>

<ul>
<li>cocos2d-x 架构介绍，以及与 Flash 架构的主要差异</li>
<li>如何创建、编译、发布 cocos2d-x 项目</li>
<li>Lua 与 ActionScript 的主要差异</li>
<li>Lua 里如何实现面向对象</li>
<li>如何创建一个游戏架构，分离数据、逻辑、表现</li>
<li>cocos2d-x 里出现的各种事件，例如触摸、重力感应等</li>
<li>cocos2d-x 如何与服务端交互</li>
<li>资源的整合与优化</li>
<li>画面渲染和内存优化</li>
<li>创建自适应多种分辨率的 UI 界面</li>
</ul>


<p>从 Flash 体系转到 cocos2d-x 在技术上没有太多问题，更主要的门槛还是在工具链和具体实践上。</p>

<p>本文尽可能从 Flash 开发者的角度阐述如何转入 quick 体系。</p>

<p>项目地址： <a href="https://github.com/dualface/quick-cocos2d-x">https://github.com/dualface/quick-cocos2d-x</a></p>

<!-- more -->


<h2>从 Flash 的角度看 quick-cocos2d-x 体系</h2>

<p>Flash 实际上是一个工具链，包含了从设计、开发、生成、运行的全套工具。主要由几个部分组成：</p>

<ul>
<li>Flash Professional：制作 Flash 动画的工具</li>
<li>Flash Builder：一个基于 Eclipse 的 IDE，以及 Flex SDK</li>
<li>Flash Player：在浏览器中运行 SWF 文件的播放器</li>
<li>AIR：在桌面和移动设备上运行 SWF 文件的播放器</li>
</ul>


<p>在开发基于 Flash 的游戏时，不管使用什么框架，最底层都是 Flash Player 提供的一系列 API。这些 API 完成了图像绘制、音乐播放、用户交互等功能。</p>

<p>而 quick-cocos2d-x 则由以下部分组成：</p>

<ul>
<li>quick-cocos2d-x Runtime：游戏引擎</li>
<li>quick-cocos2d-x Player：播放器，负责在不同平台上初始化运行环境和游戏引擎，然后载入 Lua 脚本执行</li>
<li>tools：一些辅助工具，例如编译 Lua 脚本、创建自定义的 tolua++ 模块等等</li>
</ul>


<br />


<p>quick-cocos2d-x Runtime 结构：</p>

<p><img src="/upload/quick/from_flash_to_quick_architecture.png" alt="from_flash_to_quick_architecture.png" /></p>

<ul>
<li>最底层是操作系统提供的 OpenGL 库，可以利用硬件加速完成图像绘制（音乐在不同平台会使用不同 API，这里没有单独列出）。</li>
<li>中间一层，首先是 C++ 编写的 cocos2d-x 引擎。这个引擎提供一个高性能的游戏开发基础架构，让开发者从不同平台的图像渲染、音乐播放、用户交互等细节中解脱出来。接下来用 tolua++ 这个辅助工具，将 cocos2d-x 引擎的 C++ 接口导入 Lua 环境，让 Lua 脚本可以调用 cocos2d-x 的 API。最后，LuaJIT 提供了一个高性能的 Lua 虚拟机，在支持 JIT 的平台上，可以以接近 C 语言的速度运行 Lua 脚本。</li>
<li>Lua Objc/Java Bridge 则是 quick-cocos2d-x 专为游戏集成各种第三方库提供的便捷工具，可以大大降低游戏接入渠道的成本。</li>
<li>顶层的 quick framework 是在 cocos2d-x 接口基础上进行的封装，简化了大部分游戏开发时的常用功能。</li>
</ul>


<br />


<p>虽然 quick 已经提供了 iOS/Android/Windows/Mac 平台的 Player，但如果需要添加自己的第三方库，或者对 quick 做一些扩展，那么就需要安装各个平台自己的开发工具，才能够完成自定义 Player 的创建工作：</p>

<p><img src="/upload/quick/from_flash_to_quick_build_toolchain.png" alt="from_flash_to_quick_build_toolchain.png" /></p>

<br />


<h2>准备构建环境</h2>

<blockquote><p>只有准备自己构建 Player 时才需要准备构建环境。quick-cocos2d-x 提供了功能完善的 Windows 和 Mac 平台下的 Player，可以满足绝大多数情况下的开发需要。具体内容请参考本文下一小节。</p></blockquote>

<p>第一步自然是获取 quick-cocos2d-x 的源代码。</p>

<ol>
<li><p>安装 git 工具，然后下载 quick-cocos2d-x 仓库：</p>

<pre><code>git clone git://github.com/dualface/quick-cocos2d-x.git
</code></pre></li>
<li><p>完成后，在 quick-cocos2d-x 目录执行命令（由于要下载几百兆的 cocos2d-x，所以耗时较长）：</p>

<pre><code>git submodule init
git submodule update
</code></pre></li>
</ol>


<blockquote><p>注意：不能使用官方版 cocos2d-x，因为 quick-cocos2d-x 为了加强 Lua 执行，对 cocos2d-x 做了许多改进。</p></blockquote>

<br />


<h3>配置 Mac 下的开发环境</h3>

<p>准备工作：</p>

<ol>
<li>从 Apple 网站下载安装最新版 Xcode（已经包含 Mac SDK 和 iOS SDK）</li>
<li><p>启动 Xcode，选择菜单“Xcode -> Preferences”，打开  Preferences 对话框。切换到 Locations 选项卡，选中“Source Trees”选项卡。并添加一个名为 <strong>QUICK_COCOS2DX_ROOT</strong> 的变量，其值为 quick-cocos2d-x 所在目录：</p>

<p><img src="/upload/quick/from_flash_to_quick_set_xcode.png" alt="from_flash_to_quick_set_xcode.png" /></p></li>
<li><p>进入命令行，输入：</p>

<pre><code>open -a TextEdit ~/.profile
</code></pre>

<p>添加内容（将其中的 [PATH TO] 替换为实际目录）：</p>

<pre><code>export QUICK_COCOS2DX_ROOT=/[PATH TO]/quick-cocos2d-x
export COCOS2DX_ROOT=$QUICK_COCOS2DX_ROOT/lib/cocos2d-x
</code></pre></li>
</ol>


<blockquote><p>注意：必须使用绝对路径。</p></blockquote>

<p>设置完成后，打开 <strong>quick-cocos2d-x/samples/CoinFlip/proj.ios/CoinFlip.ios.xcodeproj</strong> 项目，如果编译成功，那么构建 Mac 和 iOS 平台应用的环境就搭建好了。</p>

<br />


<ol>
<li>从 Google 网站 <a href="http://developer.android.com/sdk/index.html">http://developer.android.com/sdk/index.html</a> 下载最新的 Android SDK（强烈建议下载 ADT Bundle 版本）。</li>
<li><p>解压缩以后，运行 tools/android 程序，打开 Android SDK 管理器：</p>

<p><img src="/upload/quick/from_flash_to_quick_set_android_mac.png" alt="from_flash_to_quick_set_android_mac.png" /></p></li>
<li><p>由于 quick-cocos2d-x 最低支持 Android 2.2 版，所以选中 Android 2.2 SDK，然后下载安装即可。</p></li>
<li><p>下载 Android NDK r8b 版本并解压缩（由于 NDK 的特殊性，所以对版本有特定要求），Mac 版下载地址：<a href="http://221.176.14.87/dl.google.com/android/ndk/android-ndk-r8b-darwin-x86.tar.bz2">http://221.176.14.87/dl.google.com/android/ndk/android-ndk-r8b-darwin-x86.tar.bz2</a>，Windows 版下载地址：<a href="http://221.176.14.96/dl.google.com/android/ndk/android-ndk-r8b-windows.zip">http://221.176.14.96/dl.google.com/android/ndk/android-ndk-r8b-windows.zip</a>。</p></li>
<li><p>再次修改 ~/.profile 文件，加入以下内容：</p>

<pre><code>export ANDROID_SDK_ROOT=/[PATH TO]/android-sdk-macosx
export ANDROID_NDK_ROOT=/[PATH TO]/android-ndk-r8b
</code></pre></li>
<li><p>在命令行模式下进入 <strong>quick-cocos2d-x/samples/CoinFlip/proj.android/</strong> 目录，执行命令 <strong>build_native.sh</strong>，如果最后输出以下内容就表示创建成功：</p>

<pre><code>SharedLibrary  : libgame.so
Install        : libgame.so =&gt; libs/armeabi/libgame.so
</code></pre></li>
</ol>


<br />


<h3>配置 Windows 下的开发配置</h3>

<p>quick-cocos2d-x 要求安装 Visual Studio 2012（Express 版或者更高级版本都可以），以及最新的显卡驱动（否则可能出现 Player 无法运行的问题）。</p>

<ol>
<li><p>打开系统对话框，添加一个环境变量 <strong>QUICK_COCOS2DX_ROOT</strong>，指向 quick-cocos2d-x 所在目录：</p>

<p><img src="/upload/quick/from_flash_to_quick_set_windows.png" alt="from_flash_to_quick_set_windows.png" /></p></li>
<li><p>打开 quick-cocos2d-x\simulator\proj.win32\LuaHostWin32\LuaHostWin32.sln 工程，进行编译。</p></li>
</ol>


<br />


<h2>用 quick-cocos2d-x 的 Player 打造最简开发环境</h2>

<p>只需要从 <a href="https://github.com/dualface/quick-cocos2d-x">https://github.com/dualface/quick-cocos2d-x</a> 网站直接下载最新版本的 Windows 或 Mac 平台下的 Player 执行文件，我们就可以开始进行游戏开发了。</p>

<p>以 Windows 环境为例：</p>

<ol>
<li><p>下载 <a href="https://github.com/dualface/quick-cocos2d-x/archive/master.zip">https://github.com/dualface/quick-cocos2d-x/archive/master.zip</a>，解压缩后运行 simulator/bin/win32/LuaHostWin32.exe：</p>

<p><img src="/upload/quick/from_flash_to_quick_run_luahostwin32.png" alt="from_flash_to_quick_run_luahostwin32.png" /></p></li>
<li><p>选择 Player 的菜单“File -> Open Project”，并选择 samples\CoinFlip 为 Project Directory；设置 Screen Size 为 640x960，Screen Direction 为 Landscape：</p>

<p><img src="/upload/quick/from_flash_to_quick_run_luahostwin32_project.png" alt="from_flash_to_quick_run_luahostwin32_project.png" /></p></li>
<li><p>一切正常的话，点击 Open Project 按钮后就可以看到 CoinFlip 示例程序的画面了：</p>

<p><img src="/upload/quick/from_flash_to_quick_run_luahostwin32_ok.png" alt="from_flash_to_quick_run_luahostwin32_ok.png" /></p></li>
</ol>


<br />


<p>quick-cocos2d-x 的 Player 提供了创建运行项目、动态切换分辨率、实时调试窗口、一键重启等功能，在开发实践中可以显著提高开发效率。</p>

<p>使用 quick-cocos2d-x 的典型开发流程：</p>

<ol>
<li><p>对于一个团队中的大多数开发人员来说，只需要使用 Player 就能完成大部分开发工作。不需要他们安装诸如 Xcode、Visual Studio 等任何开发工具。</p></li>
<li><p>如果游戏包含 C/C++ 的扩展代码，由具备完整开发环境的开发人员构建一个自定义 Player ，并分发给整个团队即可。</p></li>
<li><p>需要真机测试或发布时，由具备相应开发环境的开发人员编译并输出 .ipa 或 .apk 文件。配合 TestFlight 等第三方 SDK，可以轻松实现错误日志、崩溃记录等功能，为调试提供详细数据。</p></li>
</ol>


<br />


<ul>
<li>未完待续 -</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cocos2d-x 2.0 自适应多种分辨率]]></title>
    <link href="http://dualface.github.com/blog/2012/08/17/cocos2d-x-2-dot-0-multi-resolution/"/>
    <updated>2012-08-17T23:17:00+08:00</updated>
    <id>http://dualface.github.com/blog/2012/08/17/cocos2d-x-2-dot-0-multi-resolution</id>
    <content type="html"><![CDATA[<p>cocos2d-x 2.0 提供一个极有价值的新特征: setDesignResolutionSize() 。</p>

<p>这个函数用于指定一个 OpenGL 视图，然后将这个视图映射到设备屏幕上。根据不同的设定，视图会自动缩放显示内容，为 cocos2d-x 自适应多种分辨率提供了基本支持。</p>

<!--more-->


<p>不过要真正实现自适应分辨率，从场景设计、美术制作到程序编写，都需要遵循一套规范，才能极大减少工作量。</p>

<p><blockquote><p>注意：本文假定游戏是横向显示的。</p></blockquote></p>

<p>~</p>

<h2>明确自适应多种分辨率的需求</h2>

<p>要让游戏在不同分辨率下都获得良好的用户体验，应该满足这几个要求：</p>

<ul>
<li>背景图填满整个画面，不出现黑边；</li>
<li>背景图的主要内容都显示在屏幕上，尽可能少的裁剪图片（减少超出屏幕可视区域的部分）；</li>
<li>如果背景图需要放大，尽可能减小放大的比例，避免放大后出现明显的模糊；</li>
<li>用户界面的文字标签、按钮在任何分辨率下都应该完整显示，并且容易交互。</li>
</ul>


<p>上述需求实际上可以分解为两部分：</p>

<ul>
<li>如何制作满足多种分辨率的背景图；</li>
<li>如何定位用户界面元素（标签、按钮等）。</li>
</ul>


<p>~</p>

<h2>制作适合多种分辨率的背景图</h2>

<p>在开始制作背景图前，我们看看市面上各种设备（480 像素分辨率的老设备 2012 的游戏应该可以无视了）常见的像素分辨率（resolution in pixels）：</p>

<table>
<thead>
<tr>
<th>Device              </th>
<th> Width  </th>
<th> Height</th>
</tr>
</thead>
<tbody>
<tr>
<td>iPad                </td>
<td> 1024px </td>
<td>  768px</td>
</tr>
<tr>
<td>New iPad            </td>
<td> 2048px </td>
<td> 1536px</td>
</tr>
<tr>
<td>iPhone              </td>
<td>  960px </td>
<td>  640px</td>
</tr>
<tr>
<td>Android Phone 1     </td>
<td>  800px </td>
<td>  480px</td>
</tr>
<tr>
<td>Android Phone 2     </td>
<td>  854px </td>
<td>  480px</td>
</tr>
<tr>
<td>Android Phone 3     </td>
<td> 1280px </td>
<td>  720px</td>
</tr>
<tr>
<td>Android Pad 1       </td>
<td> 1024px </td>
<td>  600px</td>
</tr>
<tr>
<td>Android Pad 2       </td>
<td> 1280px </td>
<td>  800px</td>
</tr>
</tbody>
</table>


<p>经过几个游戏的实践，我们确定了几个背景图的分辨率：</p>

<ul>
<li><p>2048px * 1536px</p>

<p>专门针对 New iPad，设计师的原稿也是这个尺寸。</p></li>
<li><p>960px * 720px</p>

<p>这个分辨率针对 iPhone 和 iPad 设备。在 iPhone 上 1:1 显示，上下各剪裁掉 40px。而在 iPad 上按 1.067 放大显示，正好填满整个屏幕，并且用户看不到模糊。从 2048px 的原稿导出 PNG 时，按照 0.469 比例缩小正好就是 960px * 720px。</p></li>
<li><p>854px * 480px</p>

<p>市面上的 Android 手机，854px * 480px 和 800px * 480px 是最常见的两种分辨率。2048px 的原稿按照 0.417 比例缩小，然后裁减掉上下多余部分就可以得到需要的 PNG 图片。</p></li>
<li><p>1280px * 800px</p>

<p>应付高分辨率的 Android 手机和平板设备，在各种分辨率下都可以获得很好的显示效果。2048px 的原稿按照 0.625 比例缩小，然后裁减掉上下多余部分就可以得到需要的 PNG 图片。</p></li>
</ul>


<p>对于美术来说，背景图都按照 2048px * 1536px 的尺寸绘制。然后用脚本配合 ImageMagick 就可以自动导出四种分辨率的背景图片。</p>

<p>如果需要最大程度减小游戏的下载体积，那么可以只使用 960px * 720px 的素材。并且参考本文后面示例程序的做法，用一套素材应付各种不同的分辨率。</p>

<p>唯一需要注意的问题就是：<strong>确保画面中的主要内容在各种设备上都位于屏幕的可视区域中</strong>。</p>

<p>下面几个图展示 2048px 原稿在不同设备上的可视区域：</p>

<p><img src="/upload/cocos2d-x-2.0-multires/multires_01.png" alt="" /></p>

<p><img src="/upload/cocos2d-x-2.0-multires/multires_02.png" alt="" /></p>

<p><img src="/upload/cocos2d-x-2.0-multires/multires_03.png" alt="" /></p>

<p><img src="/upload/cocos2d-x-2.0-multires/multires_04.png" alt="" /></p>

<p><img src="/upload/cocos2d-x-2.0-multires/multires_05.png" alt="" /></p>

<p><img src="/upload/cocos2d-x-2.0-multires/multires_06.png" alt="" /></p>

<p><img src="/upload/cocos2d-x-2.0-multires/multires_07.png" alt="" /></p>

<p>Photoshop 源文件下载地址: <a href="/upload/cocos2d-x-2.0-multires/multires.psd">multires.psd</a></p>

<p>~</p>

<h2>制作适合各种分辨率的用户界面元素</h2>

<p>相比背景图，界面元素的制作只需要考虑一点：<strong>必须能够放置在最小的可视区域中</strong>。如下图界面底部有一排按钮，这些按钮在各种分辨率下都能完整显示：</p>

<p><img src="/upload/cocos2d-x-2.0-multires/multires_ui01.png" alt="" /></p>

<p>在导出界面元素的 PNG 图片时，仍然使用脚本文件和 ImageMagick 按照特定比例自动缩放。</p>

<p>~</p>

<h2>在各种分辨率的屏幕上定位界面元素</h2>

<p>准备好了美术素材，接下来的挑战就是如何在不同分辨率的设备中定位界面元素。</p>

<p>为了解决这个问题，我们做了大量的尝试，最终找到一种可行的解决方案，而且使用起来非常简单。</p>

<h3>虚拟分辨率</h3>

<p>为了简化程序的开发，我们使用一个统一的虚拟坐标系来映射设备的屏幕。经过几个产品的实践，证明将屏幕宽度设定为 960pt 是很合理的。</p>

<p><strong>特别注意：在讨论虚拟坐标系时，一律使用 pt（Point）作为单位，而不是 px（Pixel）。</strong></p>

<p>下面的表格整理了各种设备分辨率与 960pt 宽度虚拟分辨率的对应关系：</p>

<table>
<thead>
<tr>
<th>Device              </th>
<th> Width  </th>
<th> Height  </th>
<th> Virtual Width </th>
<th> Virutal Height </th>
<th> Scale</th>
</tr>
</thead>
<tbody>
<tr>
<td>iPad                </td>
<td> 1024px </td>
<td>  768px  </td>
<td> 960pt         </td>
<td> 720pt          </td>
<td> 1.066666667</td>
</tr>
<tr>
<td>New iPad            </td>
<td> 2048px </td>
<td> 1536px  </td>
<td> 960pt         </td>
<td> 720pt          </td>
<td> 2.133333333</td>
</tr>
<tr>
<td>iPhone              </td>
<td>  960px </td>
<td>  640px  </td>
<td> 960pt         </td>
<td> 640pt          </td>
<td> 1.0</td>
</tr>
<tr>
<td>Android Phone 1     </td>
<td>  800px </td>
<td>  480px  </td>
<td> 960pt         </td>
<td> 576pt          </td>
<td> 0.833333333</td>
</tr>
<tr>
<td>Android Phone 2     </td>
<td>  854px </td>
<td>  480px  </td>
<td> 960pt         </td>
<td> 540pt          </td>
<td> 0.889583333</td>
</tr>
<tr>
<td>Android Phone 3     </td>
<td> 1280px </td>
<td>  720px  </td>
<td> 960pt         </td>
<td> 540pt          </td>
<td> 1.333333333</td>
</tr>
<tr>
<td>Android Pad 1       </td>
<td> 1024px </td>
<td>  600px  </td>
<td> 960pt         </td>
<td> 562pt          </td>
<td> 1.066666667</td>
</tr>
<tr>
<td>Android Pad 2       </td>
<td> 1280px </td>
<td>  800px  </td>
<td> 960pt         </td>
<td> 600pt          </td>
<td> 1.333333333</td>
</tr>
</tbody>
</table>


<h3>根据参考点定位界面元素</h3>

<p>在游戏初始化时，引擎就会根据设备的实际分辨率，自动设定好对应的虚拟分辨率，并且确定屏幕上的几个参考点：</p>

<table>
<thead>
<tr>
<th>Position            </th>
<th> Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>left                </td>
<td> 0pt</td>
</tr>
<tr>
<td>right               </td>
<td> 959pt</td>
</tr>
<tr>
<td>top                 </td>
<td> 虚拟分辨率的高度 - 1</td>
</tr>
<tr>
<td>bottom              </td>
<td> 0pt</td>
</tr>
<tr>
<td>center x            </td>
<td> 480pt</td>
</tr>
<tr>
<td>center y            </td>
<td> 虚拟分辨率的高度 / 2</td>
</tr>
</tbody>
</table>


<p>有了参考点，定位界面元素就很简单了。例如一个按钮的原点（按钮图片中心点）相对于屏幕左侧 40pt，相对于屏幕底部 30pt。那么在不同分辨率的设备上，这个按钮和屏幕左下角的距离都是差不多的。</p>

<p>只要确保所有界面元素都使用参考点来定位，那么就绝不会出现在设备屏幕上看不到界面元素的情况。</p>

<p>~</p>

<h2>示例程序</h2>

<p>为了方便大家进行测试，本文的示例工程已经编译成 Windows 可执行文件。运行时可以用下列命令行启动以便测试不同分辨率：</p>

<p>``` bash 命令行参数</p>

<h1>如果没有指定命令行参数，则默认使用 960px * 640px 的屏幕分辨率。</h1>

<p>multires.demo1.win32.exe 854 480
```</p>

<p>或者双击 test_multires.cmd 直接查看不同分辨率的运行效果。</p>

<p>其他：</p>

<ul>
<li>示例程序只包含按照 960px * 720px 制作的素材。</li>
<li>示例程序可执行文件以及源代码下载：<a href="/upload/cocos2d-x-2.0-multires/multires.demo1.win32.zip">multires.demo1.win32.zip</a></li>
</ul>


<p>~</p>

<h2>补充说明</h2>

<p>本文前面描述了如何创建适合不同分辨率的图片，但最后的示例程序并没有考虑这一点，而是用一套素材就搞定了多种分辨率。实际上，我个人推荐使用一套素材适应多种分辨率，最多再为 New iPad 单独准备一套素材，这样可以显著减少工作量。</p>

<p>如果一定要按照不同分辨率使用不同的素材，那么在显示图片时需要调用 setScale() 调整图片的缩放比例。这样做的原因是 setDesignResolutionSize() 设置虚拟分辨率后，会指定一个全局的缩放比例，所有的图片即便是 scale = 100%，也会自动缩放。所以当图片尺寸和虚拟分辨率不一致时，我们就需要手动调整图片缩放比例了。</p>

<p>假设设备分辨率是 1280px * 720px，虚拟分辨率是 960pt * 540pt，背景图是 1280px * 800px。要确保背景图 1:1 显示在屏幕上，参考如下代码：</p>

<p><code>cpp 让图片按 1:1 显示在屏幕上
const CCSize&amp; winSize = CCDirector::sharedDirector()-&gt;getWinSize();
float scale = CCEGLView::sharedOpenGLView().getScaleX();
CCSprite* bg = CCSprite::create("bg.jpg")
bg-&gt;setPosition(ccp(winSize.width / 2, winSize.height / 2));
bg-&gt;setScale(1.0f / scale); // 这里重置图片缩放比例，确保图片按 1:1 显示在屏幕上
addChild(bg);
</code></p>

<p>~</p>

<p>-EOF-</p>
]]></content>
  </entry>
  
</feed>
