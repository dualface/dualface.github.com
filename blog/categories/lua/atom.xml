<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lua | 我是妖怪]]></title>
  <link href="http://dualface.github.com/blog/categories/lua/atom.xml" rel="self"/>
  <link href="http://dualface.github.com/"/>
  <updated>2013-02-28T02:24:18+08:00</updated>
  <id>http://dualface.github.com/</id>
  <author>
    <name><![CDATA[YuLei Liao]]></name>
    <email><![CDATA[dualface@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[从 Flash 到 quick-cocos2d-x]]></title>
    <link href="http://dualface.github.com/blog/2013/02/28/from-flash-to-quick/"/>
    <updated>2013-02-28T00:03:00+08:00</updated>
    <id>http://dualface.github.com/blog/2013/02/28/from-flash-to-quick</id>
    <content type="html"><![CDATA[<p>从 Flash 体系转到 quick-cocos2d-x（后文简称 quick）在技术上没有太多问题，更主要的门槛还是在工具链和具体实践上。</p>

<p>本文尽可能从 Flash 开发者的角度阐述如何转入 quick 体系。</p>

<p>项目地址： <a href="https://github.com/dualface/quick-cocos2d-x">https://github.com/dualface/quick-cocos2d-x</a></p>

<!-- more -->


<h2>从 Flash 的角度看 quick-cocos2d-x 体系</h2>

<p>Flash 实际上是一个工具链，包含了从设计、开发、生成、运行的全套工具。主要由几个部分组成：</p>

<ul>
<li>Flash Professional：制作 Flash 动画的工具</li>
<li>Flash Builder：一个基于 Eclipse 的 IDE，以及 Flex SDK</li>
<li>Flash Player：在浏览器中运行 SWF 文件的播放器</li>
<li>AIR：在桌面和移动设备上运行 SWF 文件的播放器</li>
</ul>


<p>在开发基于 Flash 的游戏时，不管使用什么框架，最底层都是 Flash Player 提供的一系列 API。这些 API 完成了图像绘制、音乐播放、用户交互等功能。</p>

<p>而 quick-cocos2d-x 则由以下部分组成：</p>

<ul>
<li>quick-cocos2d-x Runtime：游戏引擎</li>
<li>quick-cocos2d-x Player：播放器，负责在不同平台上初始化运行环境和游戏引擎，然后载入 Lua 脚本执行</li>
<li>tools：一些辅助工具，例如编译 Lua 脚本、创建自定义的 tolua++ 模块等等</li>
</ul>


<br />


<p>quick-cocos2d-x Runtime 结构：</p>

<p><img src="/upload/quick/from_flash_to_quick_architecture.png" alt="from_flash_to_quick_architecture.png" /></p>

<ul>
<li>最底层是操作系统提供的 OpenGL 库，可以利用硬件加速完成图像绘制（音乐在不同平台会使用不同 API，这里没有单独列出）。</li>
<li>中间一层，首先是 C++ 编写的 cocos2d-x 引擎。这个引擎提供一个高性能的游戏开发基础架构，让开发者从不同平台的图像渲染、音乐播放、用户交互等细节中解脱出来。接下来用 tolua++ 这个辅助工具，将 cocos2d-x 引擎的 C++ 接口导入 Lua 环境，让 Lua 脚本可以调用 cocos2d-x 的 API。最后，LuaJIT 提供了一个高性能的 Lua 虚拟机，在支持 JIT 的平台上，可以以接近 C 语言的速度运行 Lua 脚本。</li>
<li>Lua Objc/Java Bridge 则是 quick-cocos2d-x 专为游戏集成各种第三方库提供的便捷工具，可以大大降低游戏接入渠道的成本。</li>
<li>顶层的 quick framework 是在 cocos2d-x 接口基础上进行的封装，简化了大部分游戏开发时的常用功能。</li>
</ul>


<br />


<p>虽然 quick 已经提供了 iOS/Android/Windows/Mac 平台的 Player，但如果需要添加自己的第三方库，或者对 quick 做一些扩展，那么就需要安装各个平台自己的开发工具，才能够完成自定义 Player 的创建工作：</p>

<p><img src="/upload/quick/from_flash_to_quick_build_toolchain.png" alt="from_flash_to_quick_build_toolchain.png" /></p>

<br />


<h2>准备构建环境</h2>

<blockquote><p>只有准备自己构建 Player 时才需要准备构建环境。quick-cocos2d-x 提供了功能完善的 Windows 和 Mac 平台下的 Player，可以满足绝大多数情况下的开发需要。具体内容请参考本文下一小节。</p></blockquote>

<p>第一步自然是获取 quick-cocos2d-x 的源代码。</p>

<ol>
<li><p>安装 git 工具，然后下载 quick-cocos2d-x 仓库：</p>

<pre><code>git clone git://github.com/dualface/quick-cocos2d-x.git
</code></pre></li>
<li><p>完成后，在 quick-cocos2d-x 目录执行命令（由于要下载几百兆的 cocos2d-x，所以耗时较长）：</p>

<pre><code>git submodule init
git submodule update
</code></pre></li>
</ol>


<blockquote><p>注意：不能使用官方版 cocos2d-x，因为 quick-cocos2d-x 为了加强 Lua 执行，对 cocos2d-x 做了许多改进。</p></blockquote>

<br />


<h3>配置 Mac 下的开发环境</h3>

<p>准备工作：</p>

<ol>
<li>从 Apple 网站下载安装最新版 Xcode（已经包含 Mac SDK 和 iOS SDK）</li>
<li><p>启动 Xcode，选择菜单“Xcode -> Preferences”，打开  Preferences 对话框。切换到 Locations 选项卡，选中“Source Trees”选项卡。并添加一个名为 <strong>QUICK_COCOS2DX_ROOT</strong> 的变量，其值为 quick-cocos2d-x 所在目录：</p>

<p><img src="/upload/quick/from_flash_to_quick_set_xcode.png" alt="from_flash_to_quick_set_xcode.png" /></p></li>
<li><p>进入命令行，输入：</p>

<pre><code>open -a TextEdit ~/.profile
</code></pre>

<p>添加内容（将其中的 [PATH TO] 替换为实际目录）：</p>

<pre><code>export QUICK_COCOS2DX_ROOT=/[PATH TO]/quick-cocos2d-x
export COCOS2DX_ROOT=$QUICK_COCOS2DX_ROOT/lib/cocos2d-x
</code></pre></li>
</ol>


<blockquote><p>注意：必须使用绝对路径。</p></blockquote>

<p>设置完成后，打开 <strong>quick-cocos2d-x/samples/CoinFlip/proj.ios/CoinFlip.ios.xcodeproj</strong> 项目，如果编译成功，那么构建 Mac 和 iOS 平台应用的环境就搭建好了。</p>

<br />


<ol>
<li>从 Google 网站 <a href="http://developer.android.com/sdk/index.html">http://developer.android.com/sdk/index.html</a> 下载最新的 Android SDK（强烈建议下载 ADT Bundle 版本）。</li>
<li><p>解压缩以后，运行 tools/android 程序，打开 Android SDK 管理器：</p>

<p><img src="/upload/quick/from_flash_to_quick_set_android_mac.png" alt="from_flash_to_quick_set_android_mac.png" /></p></li>
<li><p>由于 quick-cocos2d-x 最低支持 Android 2.2 版，所以选中 Android 2.2 SDK，然后下载安装即可。</p></li>
<li><p>下载 Android NDK r8b 版本并解压缩（由于 NDK 的特殊性，所以对版本有特定要求），Mac 版下载地址：<a href="http://221.176.14.87/dl.google.com/android/ndk/android-ndk-r8b-darwin-x86.tar.bz2">http://221.176.14.87/dl.google.com/android/ndk/android-ndk-r8b-darwin-x86.tar.bz2</a>，Windows 版下载地址：<a href="http://221.176.14.96/dl.google.com/android/ndk/android-ndk-r8b-windows.zip">http://221.176.14.96/dl.google.com/android/ndk/android-ndk-r8b-windows.zip</a>。</p></li>
<li><p>再次修改 ~/.profile 文件，加入以下内容：</p>

<pre><code>export ANDROID_SDK_ROOT=/[PATH TO]/android-sdk-macosx
export ANDROID_NDK_ROOT=/[PATH TO]/android-ndk-r8b
</code></pre></li>
<li><p>在命令行模式下进入 <strong>quick-cocos2d-x/samples/CoinFlip/proj.android/</strong> 目录，执行命令 <strong>build_native.sh</strong>，如果最后输出以下内容就表示创建成功：</p>

<pre><code>SharedLibrary  : libgame.so
Install        : libgame.so =&gt; libs/armeabi/libgame.so
</code></pre></li>
</ol>


<br />


<h3>配置 Windows 下的开发配置</h3>

<p>quick-cocos2d-x 要求安装 Visual Studio 2012（Express 版或者更高级版本都可以），以及最新的显卡驱动（否则可能出现 Player 无法运行的问题）。</p>

<ol>
<li><p>打开系统对话框，添加一个环境变量 <strong>QUICK_COCOS2DX_ROOT</strong>，指向 quick-cocos2d-x 所在目录：</p>

<p><img src="/upload/quick/from_flash_to_quick_set_windows.png" alt="from_flash_to_quick_set_windows.png" /></p></li>
<li><p>打开 quick-cocos2d-x\simulator\proj.win32\LuaHostWin32\LuaHostWin32.sln 工程，进行编译。</p></li>
</ol>


<br />


<h2>用 quick-cocos2d-x 的 Player 打造最简开发环境</h2>

<p>只需要从 <a href="https://github.com/dualface/quick-cocos2d-x">https://github.com/dualface/quick-cocos2d-x</a> 网站直接下载最新版本的 Windows 或 Mac 平台下的 Player 执行文件，我们就可以开始进行游戏开发了。</p>

<p>以 Windows 环境为例：</p>

<ol>
<li><p>下载 <a href="https://github.com/dualface/quick-cocos2d-x/archive/master.zip">https://github.com/dualface/quick-cocos2d-x/archive/master.zip</a>，解压缩后运行 simulator/bin/win32/LuaHostWin32.exe：</p>

<p><img src="/upload/quick/from_flash_to_quick_run_luahostwin32.png" alt="from_flash_to_quick_run_luahostwin32.png" /></p></li>
<li><p>选择 Player 的菜单“File -> Open Project”，并选择 samples\CoinFlip 为 Project Directory；设置 Screen Size 为 640x960，Screen Direction 为 Landscape：</p>

<p><img src="/upload/quick/from_flash_to_quick_run_luahostwin32_project.png" alt="from_flash_to_quick_run_luahostwin32_project.png" /></p></li>
<li><p>一切正常的话，点击 Open Project 按钮后就可以看到 CoinFlip 示例程序的画面了：</p>

<p><img src="/upload/quick/from_flash_to_quick_run_luahostwin32_ok.png" alt="from_flash_to_quick_run_luahostwin32_ok.png" /></p></li>
</ol>


<br />


<p>quick-cocos2d-x 的 Player 提供了创建运行项目、动态切换分辨率、实时调试窗口、一键重启等功能，在开发实践中可以显著提高开发效率。</p>

<p>使用 quick-cocos2d-x 的典型开发流程：</p>

<ol>
<li><p>对于一个团队中的大多数开发人员来说，只需要使用 Player 就能完成大部分开发工作。不需要他们安装诸如 Xcode、Visual Studio 等任何开发工具。</p></li>
<li><p>如果游戏包含 C/C++ 的扩展代码，由具备完整开发环境的开发人员构建一个自定义 Player ，并分发给整个团队即可。</p></li>
<li><p>需要真机测试或发布时，由具备相应开发环境的开发人员编译并输出 .ipa 或 .apk 文件。配合 TestFlight 等第三方 SDK，可以轻松实现错误日志、崩溃记录等功能，为调试提供详细数据。</p></li>
</ol>


<br />


<ul>
<li>未完待续 -</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CCLuaObjcBridge - Lua 与 Objective-C 互操作的简单解决方案]]></title>
    <link href="http://dualface.github.com/blog/2013/01/27/call-objectivec-from-lua/"/>
    <updated>2013-01-27T13:08:00+08:00</updated>
    <id>http://dualface.github.com/blog/2013/01/27/call-objectivec-from-lua</id>
    <content type="html"><![CDATA[<p>月初的时候，发了一篇关于 <a href="/blog/2013/01/01/call-java-from-lua/">Lua 与 Java 互操作的文章</a>，里面提到了我创建的 LuaJavaBridge 工具。现在，最新的 Lua 与 Objective-C 互操作工具也出来了。因为是专门针对 cocos2d-x 的，所以命名为 CCLuaObjcBridge。</p>

<p>PS: 以前的 LuaJavaBridge 也会改名为 CCLuaJavaBridge，并且参考现在 CCLuaObjcBridge 的实现，做了不少改进，完成后也会发布。</p>

<p>CCLuaObjcBridge（后文简称 luaoc）的功能就是从 Lua 里直接掉用“任意 Objective-C 类方法”。利用这个特性，封装各种 iOS 上的库简直碉堡了，堪称 cocos2d-x Lua 游戏开发的神器 ^_^</p>

<!--more-->


<h2>luaoc 的主要特征</h2>

<ul>
<li>可以从 Lua 调用 Objective-C Class Method</li>
<li>调用 Objective-C 方法时，支持 int/float/boolean/String/Lua function/Lua table 六种参数类型</li>
<li>可以将 Lua function 作为参数传递给 Objective-C，并让 Objective-C 保存 Lua function 的引用</li>
<li>可以从 Objective-C 调用 Lua 的全局函数，或者调用引用指向的 Lua function</li>
</ul>


<p>主要功能和 luaj 是一样的，但相比老版本 luaj 做了一些针对 Objective-C 的调整。</p>

<h2>luaoc 用法示例</h2>

<p>下面的代码演示了如何调用 91 SDK：</p>

<p><strong>Lua 代码:</strong></p>

<p>``` lua
-- 注册回调函数，在玩家离开 91 平台界面时显示一个消息
-- PS: 91 SDK 的支付接口不会直接返回状态给客户端，支付需要在服务端验证
local function callback(event)</p>

<pre><code>if event == "SDKNDCOM_LEAVE_PLATFORM" then
    print("充值正在进行中，稍候您就能收到金币啦")
end
</code></pre>

<p>end</p>

<p>luaoc.callStaticMethod("SDKNdCom", "registerScriptHandler", {listener = callback})</p>

<p>-- 进入 91 的支付接口
local args = {</p>

<pre><code>orderId = "order-00001001001",
coins = 1000,
</code></pre>

<p>}
local ok, ret = luaoc.callStaticMethod("SDKNdCom", "payForCoins", args)
if not ok then</p>

<pre><code>print(string.format("SDKNdCom.payForCoins() - call API failure, error code: %s", tostring(ret)))
</code></pre>

<p>end
```</p>

<br />


<p>下面代码是 Objective-C 写的中间层，用来沟通 91 SDK 和 Lua 代码。</p>

<p><strong>Objective-C 代码:</strong></p>

<p>``` objectivec
+ (NSDictionary <em>) payForCoins:(NSDictionary </em>)dict
{</p>

<pre><code>NSString *orderId = [dict objectForKey:@"orderId"];
if (!orderId || [orderId length] == 0)
{
    CFUUIDRef theUUID = CFUUIDCreate(NULL);
    CFStringRef string = CFUUIDCreateString(NULL, theUUID);
    CFRelease(theUUID);
    orderId = [(NSString *)string autorelease];
}

int coins = 0;
if ([dict objectForKey:@"coins"])
{
    coins = [[dict objectForKey:@"coins"] intValue];
}

NSString *description = [dict objectForKey:@"description"];
if (!description)
{
    description = @"";
}

int ret = [[NdComPlatform defaultPlatform] NdUniPayForCoin:orderId
                                              needPayCoins:coins
                                            payDescription:description];

return [NSDictionary dictionaryWithObjectsAndKeys:orderId, @"orderId",
        [NSNumber numberWithInt:ret], @"error", nil];
</code></pre>

<p>}</p>

<p>```</p>

<p>由于无法直接获取 Objective-C 方法的参数个数和类型，所以如果要从 Objective-C 方法里接收 Lua 传递的参数，那么只能以 NSDictionary 的形式。</p>

<p>上述代码中，Lua 端传递了一个包含 orderId 和 coins 的表格作为参数。这个表格会被 luaoc 自动转换为 NSDictionary 对象，并传入 payForCoins:(NSDictionary*) 方法。</p>

<p>不过从 Objective-C 返回值给 Lua 时，就可以返回各种类型的值。目前支持的值类型有 int/float/BOOL/NSString/NSDictionary。特别是可以返回 NSDictionary 类型后，Lua 代码从 Objective-C 端获取数据就简单很多了。</p>

<h2>从 Objective-C 调用 Lua</h2>

<p>由于 CCLuaObjcBridge 已经集成到<a href="https://github.com/dualface/quick-cocos2d-x">quick-cocos2d-x</a>（一个基于 cocos2d-x 的 Lua 游戏引擎）中，所以从 Objective-C 调用 Lua 也更简单灵活：</p>

<p>``` objectivec
// functionId 是 Lua function 的引用 ID，参考 LuaJavaBridge 文章中的描述</p>

<p>// 1. 将引用 ID 对应的 Lua function 放入 Lua stack
CCLuaObjcBridge::pushLuaFunctionById(functionId);</p>

<p>// 2. 将需要传递给 Lua function 的参数放入 Lua stack
CCLuaValueDict item;
item["title"] = CCLuaValue::stringValue("hello");
item["coins"] = CCLuaValue::intValue(1000);
item["success"] = CCLuaValue::booleanValue(TRUE);
CCLuaObjcBridge::getStack()->pushCCLuaValueDict(item);</p>

<p>// 3. 执行 Lua function
CCLuaObjcBridge::getStack()->executeFunction(1);</p>

<p>// 4. 释放引用 ID
CCLuaObjcBridge::releaseLuaFunctionById(callbackId);
```</p>

<blockquote><p>CCLuaObjcBridge::getStack() 会返回一个 CCLuaStack 对象的指针。</p></blockquote>

<p>CCLuaStack 是 quick-cocos2d-x 引入的新对象，封装了 Lua stack 的一些常用操作。例如要将值放入 Lua stack 就提供了下列方法，支持各种数据类型：</p>

<p><code>c++
void pushInt(int intValue);
void pushFloat(float floatValue);
void pushBoolean(bool boolValue);
void pushString(const char* stringValue);
void pushString(const char* stringValue, int length);
void pushNil(void);
void pushCCObject(CCObject* objectValue, const char* typeName);
void pushCCLuaValue(const CCLuaValue&amp; value);
void pushCCLuaValueDict(const CCLuaValueDict&amp; dict);
void pushCCLuaValueArray(const CCLuaValueArray&amp; array);
</code></p>

<p>相比 LuaJavaBridge，CCLuaObjcBridge 更容易使用、传递数据也更方便。以后 LuaJavaBridge 也会更名为 CCLuaJavaBridge，并使用相同的值传递机制。</p>

<br />


<h2>参考</h2>

<p>CCLuaObjcBridge 和 LuaJavaBridge 是一脉相承，更详细的描述请参考《<a href="/blog/2013/01/01/call-java-from-lua/">LuaJavaBridge - Lua 与 Java 互操作的简单解决方案</a>》。</p>

<p>- 完 -</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Mac OS X 上安装 Lua 32bit 环境]]></title>
    <link href="http://dualface.github.com/blog/2013/01/27/install-32bit-lua-on-macosx/"/>
    <updated>2013-01-27T11:42:00+08:00</updated>
    <id>http://dualface.github.com/blog/2013/01/27/install-32bit-lua-on-macosx</id>
    <content type="html"><![CDATA[<p>因为我们公司使用 <a href="https://github.com/dualface/quick-cocos2d-x">quick-cocos2d-x</a>（一个基于 cocos2d-x 的 Lua 游戏引擎）开发，所以在开发环境里必须配置 Lua，并且需要和移动设备上的 32bit Lua 匹配。</p>

<p>默认情况下，OS X 上编译 Lua 会编译成 64bit，所以需要做点手脚。此外还需要修改 LuaRocks，不然用 Lua 是编译成 32bit 了，可用 LuaRocks 安装的扩展还是 64bit。</p>

<!--more-->


<h2>编译 32bit Lua</h2>

<p>下载源代码（我用的 Lua 5.1.5）后，修改文件 src/Makefile，找到：</p>

<p>``` makefile
macosx:</p>

<pre><code>$(MAKE) all MYCFLAGS=-DLUA_USE_LINUX MYLIBS="-lreadline"
</code></pre>

<p>```</p>

<p>改为：</p>

<p>``` makefile
macosx:</p>

<pre><code>$(MAKE) all MYCFLAGS="-arch i386 -DLUA_USE_LINUX" MYLIBS="-arch i386 -lreadline"
</code></pre>

<p>```</p>

<p>make 后，file src/lua 可以看到已经是 32bit 执行文件了。</p>

<p><code>bash
$ make
$ file src/lua
src/lua: Mach-O executable i386
</code></p>

<br />


<h2>让 LuaRocks 安装 32bit 扩展</h2>

<p>首先安装 LuaRocks，然后修改文件 /usr/local/share/lua/5.1/luarocks/cfg.lua，找到：</p>

<p><code>lua
if detected.macosx then
   ...
   defaults.variables.LIBFLAG = "-arch i386 -bundle -undefined dynamic_lookup -all_load"
   ...
end
</code></p>

<p>改为：</p>

<p><code>lua
if detected.macosx then
   ...
   defaults.variables.CFLAGS = "-arch i386"
   defaults.variables.LIBFLAG = "-arch i386 -bundle -undefined dynamic_lookup -all_load"
   ...
end
</code></p>

<p>增加 CFLAGS 标志，并在 LIBFLAG 中添加 "-arch i386"。修改完成后，用 LuaRocks 重新安装需要的扩展。</p>

<p>``` bash
$ sudo luarocks install luafilesystem
...
luafilesystem 1.6.2-1 is now built and installed in /usr/local/</p>

<p>$ file /usr/local/lib/lua/5.1/lfs.so
/usr/local/lib/lua/5.1/lfs.so: Mach-O bundle i386
```</p>

<p>- 完 -</p>

<p>PS: 找了半天没找到含而不露的福利图 -3-</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LuaJavaBridge - Lua 与 Java 互操作的简单解决方案]]></title>
    <link href="http://dualface.github.com/blog/2013/01/01/call-java-from-lua/"/>
    <updated>2013-01-01T01:01:00+08:00</updated>
    <id>http://dualface.github.com/blog/2013/01/01/call-java-from-lua</id>
    <content type="html"><![CDATA[<p>最近在游戏里要集成中国移动的 SDK，而这些 SDK 都是用 Java 编写的。由于我们整个游戏都是使用 Lua 开发的，所以就面对 Lua 与 Java 互操作的问题。</p>

<p>传统做法是先用 C/C++ 借助 JNI（Java Native Interface）编写调用 Java 的接口函数，然后再将这些函数通过 tolua++ 导出给 Lua 使用。这种做法最大的问题就是太繁琐，而且稍微有一点点修改，就要重新编译，严重降低了开发效率。</p>

<p>我尝试写了几个接口函数后，发现 JNI 提供了完善的接口来操作 Java，比如查找特定的 Class、Method 等等。既然有这些东西，我想完全可以实现一个很薄的转接层。这个层会提供一些函数，让 Lua 代码可以直接调用到 Java 的方法。</p>

<p>经过一番努力，LuaJavaBridge（简称 luaj）诞生了。</p>

<!-- more -->


<h2>luaj 主要特征</h2>

<ul>
<li>  可以从 Lua 调用 Java Class Static Method</li>
<li>  调用 Java 方法时，支持 int/float/boolean/String/Lua function 五种参数类型</li>
<li>  可以将 Lua function 作为参数传递给 Java，并让 Java 保存 Lua function 的引用</li>
<li>  可以从 Java 调用 Lua 的全局函数，或者调用引用指向的 Lua function</li>
</ul>


<p>luaj 的功能很简单，但对于集成各种 SDK 来说已经完全满足需求了。</p>

<h2>luaj 用法示例</h2>

<p>下面的代码是我们游戏中实际使用的中国移动支付 SDK 调用代码，luaj 好不好用一目了然：</p>

<p><strong>Lua 代码:</strong></p>

<p>``` lua
--[[
购买 1000 金币</p>

<p>Java 方法原型:
public static void GameInterface_doBilling(final String billingIndex,</p>

<pre><code>    final boolean useSms,
    final boolean isRepeated,
    final int luaFunctionId)
</code></pre>

<p>]]</p>

<p>-- 用于处理支付结果的函数
local function callback(result)</p>

<pre><code>if result == "success" then
    game.state:increaseCoins(1000)
    game.state:save()
end
</code></pre>

<p>end</p>

<p>-- 调用 Java 方法需要的参数
local args = {</p>

<pre><code>"001",    -- billingIndex
true,     -- useSms
true,     -- isRepeated
callback  -- luaFunctionId
</code></pre>

<p>}
-- Java 类的名称
local className = "com/qeeplay/frameworks/ChinaMobile_SDK"
-- 调用 Java 方法
luaj.callStaticMethod(className, "GameInterface_doBilling", args)
```</p>

<p>上面的代码就不解释了，注释已经写得非常明白。</p>

<h2>luaj 实现原理</h2>

<p>luaj 的核心目标有两个：从 Lua 调用 Java, 从 Java 调用 Lua。整理出来就是如下几点：</p>

<ul>
<li>查找并调用指定的 Java 方法</li>
<li>检查调用结果，并从 Java 方法获取返回值</li>
<li>将 Lua function 作为参数传递给 Java 方法</li>
<li>在 Java 方法中调用 Lua function</li>
</ul>


<h3>查找并调用指定的 Java 方法</h3>

<p>JNI 提供了 FindClass() 方法用于查找指定的 Class，所以 luaj.callStaticMethod() 的第一个参数就是要调用的 Java Class 的完整类名称（类名称中的“.”要替换为“/”）。</p>

<p>找到指定 Class 后，利用 JNI 的 GetStaticMethodID() 方法就可以找到这个类的指定静态方法，前提是要提供静态方法的名称和签名。</p>

<p>所谓签名，就是指 Java 方法的参数类型和返回类型定义。例如前面示例代码中 GameInterface_doBilling() 方法的签名是 (Ljava/lang/String;ZZI)V 。关于 Java 方法签名的具体定义，可以参考：<a href="http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/types.html#wp16432">JNI Type Signatures</a>。</p>

<p>由于签名写起来有点啰嗦，所以 luaj 可以根据调用参数自动猜测方法签名。示例代码中，luaj.callStaticMethod() 的第二个参数指定了要查找的方法名称，但并没有提供方法的签名，这就是利用了 luaj 的自动猜测签名功能。</p>

<p>示例代码一共指定了 4 个参数，分别是：字符串、布尔值、布尔值、Lua function。</p>

<p>``` lua
-- 调用 Java 方法需要的参数
local args = {</p>

<pre><code>"001",          -- billingIndex
true,           -- useSms
true,           -- isRepeated
callback        -- luaFunctionId
</code></pre>

<p>}
```</p>

<p>luaj 根据这 4 个参数，会构造出正确的 GameInterface_doBilling() 方法签名。<em>注意 Lua function 是以整数的形式传入 Java 方法，所以 Java 方法的第四个参数是 int 类型）。</em></p>

<p>不幸的是 Lua 里没有办法准确判断一个数值是整数还是浮点数，所以 luaj 在猜测方法签名时，假定所有的数值都是浮点数。因此下面的代码第二个调用就会失败：</p>

<p>``` lua
local args = {1} -- 生成的方法签名是 (F)V</p>

<p>--[[
Java 方法原型:
public static void TestMethod1(final float integerValue)
]]
-- 调用成功
luaj.callStaticMethod(className, "TestMethod1", args)</p>

<p>--[[
Java 方法原型:
public static void TestMethod2(final int integerValue)
]]
-- 调用失败，正确的方法签名应该是 (I)V
luaj.callStaticMethod(className, "TestMethod2", args)
```</p>

<p>为此，luaj 允许开发者指定完整的方法签名。而且除了整数和浮点数的情况，在需要从 Java 方法获得返回值时，也需要开发者指定完整的方法签名。示例代码如下：</p>

<p>``` lua
local args ={"StringValue", 1, 3.14}</p>

<p>--[[
Java 方法原型:
public static int TestMethod3(final String stringValue,</p>

<pre><code>    final int integerValue,
    final float floatValue)
</code></pre>

<p>]]</p>

<p>-- 定义签名
-- 参数: [S]tring, [I]nteger, [F]loat
-- 返回值: [I]nt
local sig = "(Ljava/lang/String;IF)I"</p>

<p>-- 调用方法并获得返回值
local ok, ret = luaj.callStaticMethod(className, "TestMethod3", args, sig)
```</p>

<p>~</p>

<p>签名使用“<em>(依次排列的参数类型)返回值类型</em>”的格式，几个例子如下：</p>

<table>
<thead>
<tr>
<th>签名                       </th>
<th> 解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>()V                       </td>
<td> 参数：无，返回值：无</td>
</tr>
<tr>
<td>(I)V                      </td>
<td> 参数：int，返回值：无</td>
</tr>
<tr>
<td>(Ljava/lang/String;)Z     </td>
<td> 参数：字符串，返回值：布尔值</td>
</tr>
<tr>
<td>(IF)Ljava/lang/String;    </td>
<td> 参数：整数、浮点数，返回值：字符串</td>
</tr>
</tbody>
</table>


<p>这里列出不同类型对应的 Java 签名字符串：</p>

<table>
<thead>
<tr>
<th>类型名               </th>
<th> 类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>I                   </td>
<td> 整数，或者 Lua function</td>
</tr>
<tr>
<td>F                   </td>
<td> 浮点数</td>
</tr>
<tr>
<td>Z                   </td>
<td> 布尔值</td>
</tr>
<tr>
<td>Ljava/lang/String;  </td>
<td> 字符串</td>
</tr>
<tr>
<td>V                   </td>
<td> Void 空，仅用于指定一个 Java 方法不返回任何值</td>
</tr>
</tbody>
</table>


<p>Java 方法里接收 Lua function 的参数必须定义为 int 类型，具体原因详见“<a href="#E5B08620lua20function20E4BD9CE4B8BAE58F82E695B0E4BCA0E98092E7BB9920java20E696B9E6B395">将 Lua function 作为参数传递给 Java 方法</a>”小节。</p>

<p>~</p>

<h3>检查调用结果，并从 Java 方法获取返回值</h3>

<p>luaj 调用 Java 方法时，可能会出现各种错误，因此 luaj 提供了一种机制让 Lua 调用代码可以确定 Java 方法是否成功调用。</p>

<p>luaj.callStaticMethod() 会返回两个值：</p>

<ul>
<li>当成功时，第一个值为 true，第二个值是 Java 方法的返回值（如果有）。</li>
<li>当失败时，第一个值为 false，第二个值是错误代码。</li>
</ul>


<p>下面的代码展示了如何检查返回结果和获得返回值：</p>

<p>``` java Java 代码
public static int AddTwoNumbers(final int number1,</p>

<pre><code>    final int number2) {
return number1 + number2;
</code></pre>

<p>}
```</p>

<p>``` lua Lua 代码
local args = {2, 3}
local sig = "(II)I"
local ok, ret = luaj.callStaticMethod(className, "AddTwoNumbers", args, sig)</p>

<p>if not ok then</p>

<pre><code>print("luaj error:", ret)
</code></pre>

<p>else</p>

<pre><code>print("ret:", ret) -- 输出 ret: 5
</code></pre>

<p>end
```</p>

<p>~</p>

<p>错误代码定义如下：</p>

<table>
<thead>
<tr>
<th>错误代码  </th>
<th> 描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-1      </td>
<td> 不支持的参数类型或返回值类型</td>
</tr>
<tr>
<td>-2      </td>
<td> 无效的签名</td>
</tr>
<tr>
<td>-3      </td>
<td> 没有找到指定的方法</td>
</tr>
<tr>
<td>-4      </td>
<td> Java 方法执行时抛出了异常</td>
</tr>
<tr>
<td>-5      </td>
<td> Java 虚拟机出错</td>
</tr>
<tr>
<td>-6      </td>
<td> Java 虚拟机出错</td>
</tr>
</tbody>
</table>


<p>~</p>

<h3>将 Lua function 作为参数传递给 Java 方法</h3>

<p>很多时候，我们需要一种方法让 Java 代码可以向 Lua 代码传递一些消息。例如在大部分游戏平台的 SDK 中，涉及支付的部分都是异步操作的。在支付操作结束后，Java 代码需要通知 Lua 支付成功与否。</p>

<p>Lua 虚拟机中，Lua function 以值的形式保存。但这个值无法直接给 Java 用，所以 luaj 做了一个 Lua function 引用表。当一个 Lua function 传递给 Java 时，这个 function 对应的值会被存在引用表中，并获得一个唯一的引用 ID （整数）。Java 代码拿到这个引用 ID 后，就可以很方便的调用该 Lua function 了。</p>

<p>回顾最开始的示例代码，GameInterface_doBilling() 函数用于接收 Lua function 的参数就是 int 类型。因为实际传入 Java 函数的值是 Lua function 的引用 Id。</p>

<p>~</p>

<h3>在 Java 方法中调用 Lua function</h3>

<p>在 Java 代码中拿到 Lua function 的引用 ID 后，就可以很方便的调用该 Lua function 了：</p>

<p><code>java
LuaJavaBridge.callLuaFunctionWithString(luaFunctionId, "hello");
</code></p>

<p>这里出现的 LuaJavaBridge 是 luaj 的 Java 部分定义的工具 class。 callLuaFunctionWithString() 方法可以将一个字符串参数传递给指定的 Lua function。</p>

<p>LuaJavaBridge 还提供了 callLuaGlobalFunctionWithString() 方法，可以直接调用 Lua 中指定名字的全局函数。这样可以在没有 Lua function 引用 ID 的情况下和 Lua 代码交互。</p>

<p>由于自己的项目暂时没更多需求，所以目前 luaj 只支持向 Lua function 传递单个字符串参数。</p>

<p>~</p>

<h2>GL 线程和 UI 线程的协调</h2>

<p>cocos2d-x for Android 运行在多线程环境下，所以在 Lua 和 Java 交互时需要注意选择适当的线程。</p>

<p>~</p>

<p>cocos2d-x 在 Android 上以两个线程来运行，分别是负责图像渲染的 GL 线程和负责 Android 系统用户界面的 UI 线程。</p>

<ul>
<li>在 cocos2d-x 启动后，Lua 代码将由 GL 线程调用，因此从 Lua 中调用的 Java 方法如果涉及到系统用户界面的显示、更新操作，那么就必须让这部分代码切换到 UI 线程上去运行。</li>
<li>反之亦然，从 Java 调用 Lua 代码时，需要让这个调用在 GL 线程上执行，否则 Lua 代码虽然执行了，但会无法更新 cocos2d-x 内部状态。</li>
</ul>


<p>下面是 GameInterface_doBilling() 方法的主要代码：</p>

<p>``` java
public static void GameInterface_doBilling(final String billingIndex,</p>

<pre><code>final boolean useSms,
final boolean isRepeated,
final int luaFunctionId) {
</code></pre>

<p>  context.runOnUiThread(new Runnable() {</p>

<pre><code>@Override
public void run() {
  GameInterface.doBilling(useSms, isRepeated, billingIndex, new BillingCallback() {

    ...

    @Override
    public void onBillingSuccess() {
      context.runOnGLThread(new Runnable() {
        @Override
        public void run() {
          LuaJavaBridge.callLuaFunctionWithString(luaFunctionId, "success");
          LuaJavaBridge.releaseLuaFunction(luaFunctionId);
        }
      });
    }

    ...

  });
}
</code></pre>

<p>  });
}
```</p>

<p>~</p>

<p>方法中，构造了一个 Runnable 对象，用来包装需要执行的 Java 代码。这个 Runnable 对象被指定运行在 UI 线程上。这样当调用 GameInterface.doBilling() 方法时就可以正确显示出支付界面。</p>

<p>当用户支付成功后，GameInterface.doBilling() 会调用 BillingCallback.onBillingSuccess() 方法。这个方法里构造了另一个 Runnable 对象，包装了调用 Lua function 的代码。</p>

<p>看上去代码不少，实际上就是在两个线程间互相切换。确保 Lua function 跑在 GL 线程，Java 代码跑在 UI 线程。</p>

<p>~</p>

<h3>Lua function 的引用计数器</h3>

<p>Lua 虚拟机具有自动垃圾回收机制。Lua function 既然是值，那么在没有被使用时自然会被回收掉。所以 luaj 提供了 retainLuaFunction() 和 releaseLuaFunction() 两个函数用于增减 Lua function 的引用计数。</p>

<p>将一个 Lua function 以引用 ID 的形式传入 Java 时，<em>luaj 会自动增加引用 ID 的计数器</em>，所以在 Java 方法里可以放心的异步调用 Lua function。但在不需要使用该 Lua function 后，一定要<em>调用 releaseLuaFunction() 减少该引用 ID 的计数器</em>。当计数器为 0 时，会自动释放该 Lua function。</p>

<p>如果了解 cocos2d-x 中 CCObject 的 autorelease 机制，那么对引用计数应该很熟悉，两者是完全相同的实现机制。</p>

<p>~</p>

<h2>连接第三方 SDK 和 cocos2d-x 的中间层</h2>

<p>虽然 luaj 可以让开发者从 Lua 中直接调用 Java 代码。但大部分第三方 SDK 在初始化时都需要指定当前应用程序的 Activity 对象，并且还要切换不同线程，所以对于大多数第三方 SDK，我们仍然要写一个中间层用于 Lua 和 Java 的交互。</p>

<p>与使用 JNI 做中间层相比，配合 luja 的中间层是使用 Java 来编写的，不但更简单明了，而且处理线程切换也非常简单。</p>

<p>~</p>

<p>要实现一个中间层，只有两个步骤：</p>

<ul>
<li>实现供 luaj 调用的 Java 接口</li>
<li>修改游戏的 Java 入口文件，将应用程序的 Activity 对象传入 SDK</li>
</ul>


<p>第一步请参考：<a href="https://gist.github.com/4447302">“中国移动游戏基地和短信支付 SDK”中间层源代码</a></p>

<p>第二步也相当简单，只需要在游戏的 onCreate() 中调用 中间层 class 的 setContext() 方法：</p>

<p>``` java
public class mygame extends Cocos2dxActivity {</p>

<p>  protected void onCreate(Bundle savedInstanceState) {</p>

<pre><code>ChinaMobile_SDK.setContext(this); // init sdk
super.onCreate(savedInstanceState);
</code></pre>

<p>  }</p>

<p>  ...</p>

<p>}
```</p>

<p>~</p>

<p>做好一切准备工作后，在游戏的 Lua 代码里访问 SDK 功能就很简单了：</p>

<p>``` lua</p>

<p>local luaj = require("luaj")</p>

<p>local className = "com/qeeplay/frameworks/ChinaMobile_SDK"</p>

<p>-- 初始化 SDK
local args = {
  CHINA_MOBILE_SP_APP_NAME,
  CHINA_MOBILE_SP_CP_NAME,
  CHINA_MOBILE_SP_TEL
}
luaj.callStaticMethod(className, "GameInterface_initializeApp", args)</p>

<p>-- 支付
local function callback(result)
  if result == "success" then</p>

<pre><code>-- 支付成功
</code></pre>

<p>  end
end</p>

<p>local args = {
  billingIndex,
  true,
  true,
  callback
}
luaj.callStaticMethod(className, "GameInterface_doBilling", args)</p>

<p>-- 显示游戏基地界面
luaj.callStaticMethod(className, "GameCommunity_launchGameCommunity")</p>

<p>-- 提交玩家的游戏成绩
local args = {
  "0",            -- 排行榜Id
  newBestScores,  -- 新的最佳成绩
}
local sig = "(Ljava/lang/String;I)V"
luaj.callStaticMethod(className, "GameCommunity_commitScoreWithRank", args, sig)</p>

<p>```</p>

<p>~</p>

<h2>安装 luaj</h2>

<p>luaj 分为三个部分：</p>

<ul>
<li>LuaJavaBridge.java, com_qeeplay_frameworks_LuaJavaBridge.h/.cpp - 供 Java 端使用的工具类，包含 Java 接口定义文件和 JNI 实现。</li>
<li>LuaJavaBridge.h/.cpp - 供 Lua 端使用的工具类。</li>
<li>luaj.lua - LuaJavaBridge 的 Lua 包装，提供更简单和灵活的接口。</li>
</ul>


<p>下载地址：</p>

<ul>
<li><a href="https://github.com/dualface/quick-cocos2d-x/tree/luajit/hosts/libs/luaj">Java/C++ 部分源代码</a></li>
<li><a href="https://github.com/dualface/quick-cocos2d-x/blob/luajit/framework/client/luaj.lua">Lua 部分源代码</a></li>
</ul>


<p>~</p>

<p>步骤：</p>

<ul>
<li>将 LuaJavaBridge.java 添加到 Android 项目中；</li>
<li>修改 proj.android/jni/Android.mk：</li>
</ul>


<p>``` makefile</p>

<p>LOCAL_SRC_FILES := ... \</p>

<pre><code>luaj/jni/com_qeeplay_frameworks_LuaJavaBridge.cpp \
luaj/luabinding/LuaJavaBridge.cpp
</code></pre>

<p>LOCAL_C_INCLUDES := ... \</p>

<pre><code>luaj
</code></pre>

<p>```</p>

<ul>
<li>修改 AppDelegate.cpp，加入以下代码：</li>
</ul>


<p>```</p>

<h1>if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID)</h1>

<h1>include "LuaJavaBridge.h"</h1>

<h1>endif</h1>

<p>bool AppDelegate::applicationDidFinishLaunching()
{</p>

<p>  ...</p>

<p>  CCLuaEngine* pEngine = CCLuaEngine::defaultEngine();
  CCScriptEngineManager::sharedManager()->setScriptEngine(pEngine);</p>

<h1>if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID)</h1>

<p>  LuaJavaBridge_luabinding_open(pEngine->getLuaState());</p>

<h1>endif</h1>

<p>  ...
}
```</p>

<ul>
<li>修改proj.android/jni/hellocpp/main.cpp，加入以下代码：</li>
</ul>


<p>``` c++
jint JNI_OnLoad(JavaVM <em>vm, void </em>reserved)
{</p>

<p>  ...</p>

<p>  LuaJavaBridge_setJavaVM(vm);</p>

<p>  return JNI_VERSION_1_4;
}</p>

<p>```</p>

<p>~</p>

<h2>luaj 方法参考</h2>

<ul>
<li><p><code>[Lua] luaj.callStaticMethod(className, methodName, args, methodSig)</code></p>

<p>调用指定的 Java class static method，允许传入 int/float/boolean/string/function 五种类型的参数。</p></li>
<li><p><code>[Java] LuaJavaBridge.callLuaFunctionWithString(int luaFunctionId, String value)</code></p>

<p>调用引用 ID 指向的 Lua function，并传入一个字符串作为参数。</p></li>
<li><p><code>[Java] LuaJavaBridge.callLuaGlobalFunctionWithString(int luaFunctionId, String value)</code></p>

<p>调用指定名字的 Lua 全局函数，并传入一个字符串作为参数。</p></li>
<li><p><code>[Java] LuaJavaBridge.retainLuaFunction(int luaFunctionId)</code></p>

<p>增加引用 ID 的计数，确保 Lua function 不会被 Lua 虚拟机自动回收。</p></li>
<li><p><code>[Java] LuaJavaBridge.releaseLuaFunction(int luaFunctionId)</code></p>

<p>减少引用 ID 的计数，当计数等于 0 时，引用 ID 指向的 Lua function 将被回收。</p></li>
</ul>


<p>~</p>

<h2>未来改进</h2>

<p>因为我们自己的项目暂时还没有更复杂的需求，所以 luaj 目前的实现很简单。但要在这个基础上进行完善是很容易的事情，luaj 已经解决了几个关键性问题。</p>

<p>未来计划会增加的主要特性就是支持更多的类型，例如将一个以字符串为键名的 Lua table 以 Java Map 集合的形式传递给 Java。同样，从 Java 调用 Lua 函数时，也应该支持多个参数，以及更多的参数类型。</p>

<p>至于将 Java 对象传入 Lua，并在 Lua 中调用 Java 对象的方法，目前没这个打算。因为 luaj 的主要目的是为 cocos2d-x 游戏服务，而 cocos2d-x 的多线程模式要求 Lua 和 Java 代码必须在不同的线程里运行。如果在 Lua 中调用 Java 对象方法将面对许多复杂的问题。与其花大量时间去解决这个问题（还不一定能保证最后简单易用），不如简单写一个中间层。</p>

<p>最后，luaj 已经被集成到了 quick-cocos2d-x 这个基于 cocos2d-x 的快速游戏开发引擎中。quick-cocos2d-x 让开发者可以使用 Lua 语言开发高质量的商业游戏，同时又保持 cocos2d-x 的高性能、开放性、可扩展能力。并且 quick-cocos2d-x 使用最新的 LuaJIT 实现，可以让 Lua 脚本获得数倍到数十倍的性能提升。</p>

<p>最后的最后，惯例为广大程序猿送上福利美图一张 :-)</p>

<p><img src="/upload/2013-01/2013-01-01.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tolua++ 实现分析]]></title>
    <link href="http://dualface.github.com/blog/2012/08/25/tolua-plus-plus-implement/"/>
    <updated>2012-08-25T11:05:00+08:00</updated>
    <id>http://dualface.github.com/blog/2012/08/25/tolua-plus-plus-implement</id>
    <content type="html"><![CDATA[<p>tolua++ 是一个将 C/C++ 的函数和对象导出给 Lua 脚本使用的工具。</p>

<p>使用这个工具的基本步骤：</p>

<ul>
<li>将要导出的 C/C++ 函数和对象定义写入 .pkg 文件；</li>
<li>运行 tolua++ 工具，将 .pkg 文件编译为目标 .cpp 文件；</li>
<li>将目标 .cpp 文件加入项目，在启用 Lua 虚拟机后调用目标文件中的 open() 函数注册导出的内容。</li>
</ul>


<!--more-->


<p>~</p>

<h2>tolua++ 工具生成的目标文件</h2>

<p>每个目标文件都是从一系列 .pkg 文件编译而来，主要完成下列功能：</p>

<ul>
<li>定义所有从 C/C++ 导出的类型、函数和对象；</li>
<li>注册所有类型及其方法。</li>
</ul>


<p>~</p>

<h3>定义要导出的方法</h3>

<p>不管是 C 函数还是 C++ 对象的方法，都一律导出为静态函数。</p>

<p>C 函数的导出形式如下：</p>

<p>``` lua
static int tolua_math2dx_luabinding_dist00(lua_State* tolua_S)
{</p>

<pre><code>tolua_Error tolua_err;
if (!tolua_isnumber(tolua_S,1,0,&amp;tolua_err) ||
    !tolua_isnumber(tolua_S,2,0,&amp;tolua_err) ||
    !tolua_isnumber(tolua_S,3,0,&amp;tolua_err) ||
    !tolua_isnumber(tolua_S,4,0,&amp;tolua_err) ||
    !tolua_isnoobj(tolua_S,5,&amp;tolua_err))
{
    goto tolua_lerror;
}
else
{
    float p1x = (float)tolua_tonumber(tolua_S,1,0);
    float p1y = (float)tolua_tonumber(tolua_S,2,0);
    float p2x = (float)tolua_tonumber(tolua_S,3,0);
    float p2y = (float)tolua_tonumber(tolua_S,4,0);
    {
        float tolua_ret = dist(p1x, p1y, p2x, p2y);
        tolua_pushnumber(tolua_S, tolua_ret);
    }
}
return 1;
</code></pre>

<p>tolua_lerror:</p>

<pre><code>tolua_error(tolua_S,"#ferror in function 'dist'.",&amp;tolua_err);
return 0;
</code></pre>

<p>}
```</p>

<p>由于这个导出模块的名字是 math2dx_luabinding，所以导出函数的前缀就是 tolua_math2dx_luabinding_ 。而导出函数 dist 的名字也添加了后缀 00 用于区别可能存在的函数重载。</p>

<p>导出函数 dist00() 的执行步骤：</p>

<ol>
<li>首先从 stack 提取函数的参数，并一一判断类型。如果类型不符，则输出错误信息并中断执行。</li>
<li>将参数复制到临时变量中，然后调用目标函数 dist()，并将结果（如果 dist() 有返回值）push 到 stack。</li>
<li>dist00() 最后返回 dist() 函数的返回值的个数。</li>
</ol>


<p>~</p>

<p>对于 C++ 对象，方法则分为类静态方法和实例方法两种情况。</p>

<p>由于 tolua++ 导出的 C++ 类静态方法用“:”操作符调用：</p>

<pre><code>local request = CCHttpRequest:create()
</code></pre>

<p>因此导出函数里要求传入的第一个参数是 CCHttpRequest 模块：</p>

<p>``` lua
// CCHttpRequest:create()
static int tolua_cocos2dx_extension_network_CCHttpRequest_create00(lua_State* tolua_S)
{</p>

<pre><code>tolua_Error tolua_err;
if (!tolua_isusertable(tolua_S,1,"CCHttpRequest",0,&amp;tolua_err) ||
    (tolua_isvaluenil(tolua_S,2,&amp;tolua_err) ||
        !toluafix_isfunction(tolua_S,2,"LUA_FUNCTION",0,&amp;tolua_err)) ||
    !tolua_isstring(tolua_S,3,0,&amp;tolua_err) ||
    !tolua_isnumber(tolua_S,4,1,&amp;tolua_err) ||
    !tolua_isnoobj(tolua_S,5,&amp;tolua_err))
{
    goto tolua_lerror;
}
else
{
    LUA_FUNCTION listener = toluafix_ref_function(tolua_S,2,0);
    const char* url = (const char*)tolua_tostring(tolua_S,3,0);
    CCHttpRequestMethod method = (CCHttpRequestMethod)tolua_tonumber(tolua_S,
            4,CCHttpRequestMethodGET);
    {
        CCHttpRequest* tolua_ret = CCHttpRequest::create(listener,url,method);
        tolua_pushusertype(tolua_S,(void*)tolua_ret,"CCHttpRequest");
    }
}
return 1;
</code></pre>

<p>tolua_lerror:</p>

<pre><code>tolua_error(tolua_S,"#ferror in function 'create'.",&amp;tolua_err);
return 0;
</code></pre>

<p>}
```</p>

<p>PS: 个人认为将 C++ 对象视为一个 Lua module 时，那么类静态方法的调用方式应该是 CCHttpRequest.create() 这样，以便和实例方法区别开。</p>

<p>实例方法的导出区别不大，仅仅是需要检查 stack 中的第一个值是否是对象实例：</p>

<p>``` lua
// CCHttpRequest:start()
static int tolua_cocos2dx_extension_network_CCHttpRequest_start00(lua_State* tolua_S)
{</p>

<pre><code>tolua_Error tolua_err;
if (!tolua_isusertype(tolua_S,1,"CCHttpRequest",0,&amp;tolua_err) ||
    !tolua_isboolean(tolua_S,2,1,&amp;tolua_err) ||
    !tolua_isnoobj(tolua_S,3,&amp;tolua_err))
{
    goto tolua_lerror;
}
else
{
    CCHttpRequest* self = (CCHttpRequest*)tolua_tousertype(tolua_S,1,0);
    if (!self)
    {
        tolua_error(tolua_S,"invalid 'self' in function 'start'", NULL);
    }
    bool isCached = (bool)tolua_toboolean(tolua_S,2,false);
    self-&gt;start(isCached);
}
return 0;
</code></pre>

<p>tolua_lerror:</p>

<pre><code>tolua_error(tolua_S,"#ferror in function 'start'.",&amp;tolua_err);
return 0;
</code></pre>

<p>}
```</p>

<p>定义完所有要导出的方法后，tolua++ 目标文件将定义所有的模块并注册上述导出的方法。</p>

<p>~</p>

<h3>注册模块和方法</h3>

<p>对于 C 函数，会添加到 Lua 的全局名字空间中，而每一个 C++ 对象，则会注册一个与类名相同的 table，并添加到全局名字空间。</p>

<p>C++ 对象对应的 table 添加后，会将导出的类静态方法和实例方法添加到这个 table。</p>

<p>~</p>

<h2>tolua++ 库</h2>

<p>要想让目标文件正常工作，还需要依赖 tolua++ 库提供的功能。这个库提供下列功能：</p>

<ul>
<li>push 各种值到 lua stack；</li>
<li>push 一个对象或结构到 lua stack;</li>
<li>从 lua stack 取出值或对象等；</li>
<li>检查 lua stack 中值的类型；</li>
<li>在 lua 值被回收时删除对象实例。</li>
</ul>


<p>其实这篇文章应该还有不少内容，但我实在是懒得写了。。。原谅我这个程序猿吧 -_-#</p>

<p>因为下一篇文章才是我要说的重点 :)</p>

<p>~</p>

<p>-EOF-</p>
]]></content>
  </entry>
  
</feed>
