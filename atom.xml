<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我是妖怪~廖宇雷</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liaoyulei.cn/"/>
  <updated>2017-05-13T12:09:44.000Z</updated>
  <id>http://liaoyulei.cn/</id>
  
  <author>
    <name>廖宇雷</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>彻底解决 Unity 中 Tilemap 缝隙问题</title>
    <link href="http://liaoyulei.cn/2017/05/08/fix-unity-tilemap-gap/"/>
    <id>http://liaoyulei.cn/2017/05/08/fix-unity-tilemap-gap/</id>
    <published>2017-05-08T02:32:07.000Z</published>
    <updated>2017-05-13T12:09:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用 Unity 开发一个独立游戏，游戏里用到了 Tilemap。但却遇到一个让人很郁闷的问题，就是拼接的地图总是有随机出现的缝隙。</p>
<img src="/2017/05/08/fix-unity-tilemap-gap/01.png" alt="01.png" title="">
<p>经过网络搜索和自己摸索，总结了几条解决此问题的技巧。</p>
<blockquote>
<p>这里有一点要提醒：因为我的游戏是像素风，所以修改下面两项设置可以获得很好的效果。如果是非像素风的游戏，那不应该修改下面两项设置，而是应该直接按照本文最后的方法对图片进行边缘扩展。</p>
</blockquote>
<a id="more"></a>
<p>首先，确保你的图片宽度和高度是偶数。然后对 Unity 进行如下设置：</p>
<ul>
<li><p>选中图片，将图片的 <strong>Filter Mode</strong> 指定为 <strong>Point (no filter)</strong></p>
<img src="/2017/05/08/fix-unity-tilemap-gap/remove-filter.png" alt="remove-filter.png" title="">
</li>
<li><p>选择菜单 Edit -&gt; Project Settings -&gt; Quality，打开 QualitySettings 设置。在这里选中每一个级别，将其中的 <strong>Anisotropic Textures</strong> 和 <strong>Anti Aliasing</strong> 都指定为 <strong>Disabled</strong>。</p>
<img src="/2017/05/08/fix-unity-tilemap-gap/disable-anti-aliasing.png" alt="disable-anti-aliasing.png" title="">
</li>
</ul>
<p>经过上述设置后，对于不改变位置和缩放的 Tilemap 来说，已经可以做到清晰显示了，连接处也不会有缝隙。</p>
<p>但如果是需要移动或者缩放的地图，那么还是会出现缝隙，这就需要作进一步的处理。</p>
<h2 id="设置-1-Pixel-1-Unit"><a href="#设置-1-Pixel-1-Unit" class="headerlink" title="设置 1 Pixel / 1 Unit"></a>设置 1 Pixel / 1 Unit</h2><p>要在移动时消除缝隙，应该将图片的 <strong>Pixels per Unit</strong> 指定为 <strong>1</strong>。也就是一个像素对应场景里一个度量单位。</p>
<p>这样我们在代码里通过对 x/y 取整，就可以很容易实现 Pixel Perfect 的显示。</p>
<p>示例代码：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><div class="line">transform.position = <span class="keyword">new</span> Vector3 (Mathf.Round (x), Mathf.Round (y), <span class="number">0</span>);</div></pre></td></tr></table></figure>
<h2 id="扩展图像边缘"><a href="#扩展图像边缘" class="headerlink" title="扩展图像边缘"></a>扩展图像边缘</h2><p>如果对 Tilemap 进行缩放，哪怕 x/y 已经取整，显示时还是可能出现缝隙，此时就必须对图片进行处理了。</p>
<p>我们将原始的图片边缘进行扩展，这样在多个 Sprite 拼接为 Tilemap 时，由于有互相重叠的像素，就不会再有缝隙了。</p>
<img src="/2017/05/08/fix-unity-tilemap-gap/extrude-image.png" alt="extrude-image.png" title="">
<p>这个事情当然可以让美术在制作图片时就考虑好此问题。如果是已经做好的图片，可以用简单的 Python 脚本来扩展：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image <span class="keyword">as</span> PIL_Image</div><div class="line"></div><div class="line">extrude_width = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment"># open origin image</span></div><div class="line">image = PIL_Image.open(<span class="string">'origin.png'</span>)</div><div class="line">w = image.size[<span class="number">0</span>]</div><div class="line">h = image.size[<span class="number">1</span>]</div><div class="line"></div><div class="line"><span class="comment"># left_top</span></div><div class="line">left_top_point = image.crop((<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>))</div><div class="line"><span class="comment"># right_top</span></div><div class="line">right_top_point = image.crop((w - <span class="number">1</span>, <span class="number">0</span>, w, <span class="number">1</span>))</div><div class="line"><span class="comment"># right_bottom</span></div><div class="line">right_bottom_point = image.crop((w - <span class="number">1</span>, h - <span class="number">1</span>, w, h))</div><div class="line"><span class="comment"># left_bottom</span></div><div class="line">left_bottom_point = image.crop((<span class="number">0</span>, h - <span class="number">1</span>, <span class="number">1</span>, h))</div><div class="line"><span class="comment"># top</span></div><div class="line">top_edge = image.crop((<span class="number">0</span>, <span class="number">0</span>, w, <span class="number">1</span>))</div><div class="line"><span class="comment"># bottom</span></div><div class="line">bottom_edge = image.crop((<span class="number">0</span>, h - <span class="number">1</span>, w, h))</div><div class="line"><span class="comment"># left</span></div><div class="line">left_edge = image.crop((<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, h))</div><div class="line"><span class="comment"># right</span></div><div class="line">right_edge = image.crop((w - <span class="number">1</span>, <span class="number">0</span>, w, h))</div><div class="line"></div><div class="line"><span class="comment"># new image</span></div><div class="line">nw = w + extrude_width * <span class="number">2</span></div><div class="line">nh = h + extrude_width * <span class="number">2</span></div><div class="line">newsize = (nw, nh)</div><div class="line">newimage = PIL_Image.new(<span class="string">"RGBA"</span>, newsize)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, extrude_width):</div><div class="line">    newimage.paste(top_edge, (extrude_width, i))</div><div class="line">    newimage.paste(left_edge, (i, extrude_width))</div><div class="line">    newimage.paste(right_edge, (nw - i - <span class="number">1</span>, extrude_width))</div><div class="line">    newimage.paste(bottom_edge, (extrude_width, nh - i - <span class="number">1</span>))</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, extrude_width):</div><div class="line">        newimage.paste(left_top_point, (i, j))</div><div class="line">        newimage.paste(right_top_point, (nw - i - <span class="number">1</span>, j))</div><div class="line">        newimage.paste(right_bottom_point, (nw - i - <span class="number">1</span>, nh - j - <span class="number">1</span>))</div><div class="line">        newimage.paste(left_bottom_point, (i, nh - j - <span class="number">1</span>))</div><div class="line"></div><div class="line"><span class="comment"># copy center</span></div><div class="line">newimage.paste(image, (extrude_width, extrude_width))</div><div class="line"></div><div class="line"><span class="comment"># save new image</span></div><div class="line">newimage.save(<span class="string">'newimage.png'</span>)</div></pre></td></tr></table></figure>
<p>这个脚本里改变 <code>extrude_width</code> 就可以指定要扩展多少个像素，通常四周各扩展一个像素就够用了。</p>
<blockquote>
<p>这个脚本依赖 <strong>Pillow</strong> 库，所以先得用 <code>easy_setup</code> 或者 <code>pip</code> 把 <strong>Pillow</strong> 库装上。</p>
</blockquote>
<p>经过上述处理，Tilemap 看上去就没有任何缝隙了。</p>
<img src="/2017/05/08/fix-unity-tilemap-gap/final-map.png" alt="final-map.png" title="">
<p>-EOF-</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在使用 Unity 开发一个独立游戏，游戏里用到了 Tilemap。但却遇到一个让人很郁闷的问题，就是拼接的地图总是有随机出现的缝隙。&lt;/p&gt;
&lt;img src=&quot;/2017/05/08/fix-unity-tilemap-gap/01.png&quot; alt=&quot;01.png&quot; title=&quot;&quot;&gt;
&lt;p&gt;经过网络搜索和自己摸索，总结了几条解决此问题的技巧。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里有一点要提醒：因为我的游戏是像素风，所以修改下面两项设置可以获得很好的效果。如果是非像素风的游戏，那不应该修改下面两项设置，而是应该直接按照本文最后的方法对图片进行边缘扩展。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="tips" scheme="http://liaoyulei.cn/categories/tips/"/>
    
    
      <category term="unity" scheme="http://liaoyulei.cn/tags/unity/"/>
    
  </entry>
  
  <entry>
    <title>Game Networking</title>
    <link href="http://liaoyulei.cn/2017/03/14/game-networking/"/>
    <id>http://liaoyulei.cn/2017/03/14/game-networking/</id>
    <published>2017-03-14T03:09:26.000Z</published>
    <updated>2017-03-17T12:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在学习网络游戏有关的内容。无意中发现一个极好的系列文章，由浅入深的讲解了网络游戏的很多基础知识和具体实现。</p>
<p>这个系列文章原文发表在作者的个人网站上 <a href="http://gafferongames.com/networking-for-game-programmers/" target="_blank" rel="external">http://gafferongames.com/networking-for-game-programmers/</a> 。作者 Glenn Fiedler 在网络游戏领域是一位公认的专家，在游戏行业具有超过 15 年的经验。</p>
<p>由于精力有限，我不可能全文翻译这个系列文章。所以我只选择一些重点来说明，相当于原文的读书笔记。</p>
<p>这个系列文章分为几个部分：</p>
<ul>
<li>UDP 和 TCP 传输协议的区别，以及为什么应该选择 UDP</li>
<li>如何在 UDP 之上实现自己的游戏通讯协议</li>
<li>一些和网络游戏有关的扩展内容，例如浮点数的确定性和状态同步等</li>
</ul>
<p>我按照自己的理解重新组织了一下文章的顺序，并介绍了每篇文章的重点。</p>
<a id="more"></a>
<p>~</p>
<h2 id="为什么应该选择-UDP"><a href="#为什么应该选择-UDP" class="headerlink" title="为什么应该选择 UDP"></a>为什么应该选择 UDP</h2><p>文章 <a href="http://gafferongames.com/networking-for-game-programmers/udp-vs-tcp/" target="_blank" rel="external">UDP vs. TCP</a> 详细阐述了 UDP 和 TCP 传输协议的区别，以及为什么应该在游戏里选择 UDP 作为传输协议。</p>
<p>作者在文章里解释了 TCP/IP 的基本原理，以及 TCP 和 UDP 两种传输协议的主要区别：</p>
<ul>
<li>TCP<ul>
<li>基于连接</li>
<li>保证数据到达和数据到达的顺序</li>
<li>自动将数据切分为包</li>
<li>确保数据发送速度不会超过网络连接速度（堵塞控制）</li>
<li>容易使用，读取和写入数据就像操作一个文件</li>
</ul>
</li>
<li>UDP<ul>
<li>没有连接的概念，必须自己编码实现</li>
<li>无法保证数据确实能够到达，也无法保证数据到达的顺序，甚至可能出现重复数据</li>
<li>需要自己切分数据为包来发送</li>
<li>需要自己实现堵塞控制</li>
<li>需要自己确定数据包是否丢失，并决定是否需要重新发送</li>
</ul>
</li>
</ul>
<p>相比 UDP，TCP 的使用更简单，开发者需要操心的事情更少。但对于需要快速发送数据的网络游戏来说，UDP 却是更好的选择，为什么呢？</p>
<p>TCP 在传输数据时，如果某个数据包没能到达接收方。TCP 会强制重新发送数据，而重新发送前会有一个等待时间，并且此时新的数据也无法发送到服务器。对于快节奏的网游来说，这种等待是个障碍。因为对于服务器或者参与游戏的其他玩家来说，通常只有最新的数据有意义。所以这种发送数据失败重试的机制反倒会阻碍客户端将最新状态发送到服务器。</p>
<p>文章里还阐述了为什么不应该混合使用 TCP 和 UDP，以及一些基础知识。</p>
<p>接下来作者在文章 <a href="http://gafferongames.com/networking-for-game-programmers/sending-and-receiving-packets/" target="_blank" rel="external">Sending and Receiving Packets</a> 里以简洁的代码展示了如何用 UDP 发送和接收数据包。</p>
<p>~</p>
<h2 id="实现自己的游戏通讯协议"><a href="#实现自己的游戏通讯协议" class="headerlink" title="实现自己的游戏通讯协议"></a>实现自己的游戏通讯协议</h2><p>由于 UDP 是无连接状态的，所以首先需要解决连接状态的确认问题。文章 <a href="http://www.gafferongames.com/networking-for-game-programmers/virtual-connection-over-udp" target="_blank" rel="external">Virtual Connection over UDP</a> 前面部分阐述了数据包在网络上是如何传输的，让读者明白为什么 UDP 传输时无法保证数据包到达的可靠性和到达顺序。</p>
<p>接下来作者从最简单的 Peer-to-Peer 开始，讲解如何设计一个自己的数据包结构：</p>
<ul>
<li>在数据包中插入协议标识符（protocol id），让接收方可以过滤掉无关的 UDP 数据包</li>
<li>分析数据包的来源 IP，确定什么时候创建一个虚拟连接的内部状态</li>
<li>利用超时来确定虚拟连接的断开</li>
</ul>
<p>然后就是 UDP 最复杂的部分了。文章 <a href="http://www.gafferongames.com/networking-for-game-programmers/reliability-and-flow-control" target="_blank" rel="external">Reliability, Ordering and Congestion Avoidance over UDP</a> 阐述使用 UDP 传输数据时如何处理可靠性、包顺序和堵塞控制。</p>
<p>通过自己设计的数据包格式来解决可靠性、数据顺序：</p>
<ul>
<li>在数据包中添加序列号（sequence）。发送方每次发送一个新数据包时，就增加 <code>seq</code>。接收方通过比较收到数据包的 <code>seq</code> 和记录到的最大 <code>seq</code>，就知道一个数据包是不是最新的。</li>
<li>在数据包中添加确认序列号（acknowledge）。发送方每次发送一个数据包时，<code>ack</code> 会保存发送方收到的最新数据包的 <code>seq</code>。</li>
</ul>
<p>利用 <code>seq</code> 和 <code>ack</code>，发送方和接受方都可以检查收到的数据包是不是最新的，也可以知道自己发送的数据包是不是已经被发送收到。</p>
<p>考虑到 UDP 可能丢失多个数据包，所以还需要添加 <code>ack bitfield</code> 到数据包中。通过设置  <code>unsigned int</code> 位的方式，让接收方知道上一次发送的数据包有哪些已经收到。配合超时策略，发送方就知道哪些数据包没有到达接收方，从而可以决定是否要重新发送丢失的数据包（但发送时仍然使用最新的 <code>seq</code>）。</p>
<p>最后，文章阐述了一种简单的度量方法。利用发送 <code>seq</code> 和收到相同 <code>ack</code> 之间的时间差来计算网络的速率。并在速率下降时，降低发送的频率，而在速率正常后恢复到正常的发送频率。</p>
<p>整篇文章利用一些简单的机制，实现了一个初步的解决方案。虽然离实际应用还有不少距离，但对于理解和学习却非常有价值。</p>
<p>要完整学习如何设计网络游戏的数据协议，可以阅读系列文章 <a href="http://gafferongames.com/building-a-game-network-protocol/" target="_blank" rel="external">Building a Game Network Protocol</a> 。</p>
<p>~</p>
<h2 id="和网络游戏有关的扩展内容"><a href="#和网络游戏有关的扩展内容" class="headerlink" title="和网络游戏有关的扩展内容"></a>和网络游戏有关的扩展内容</h2><p>网络游戏的调试是个很复杂的问题。文章 <a href="http://www.gafferongames.com/networking-for-game-programmers/debugging-multiplayer-games" target="_blank" rel="external">Debugging Multiplayer Games</a> 里告诉你很多游戏集成多人玩法之所以失败是因为团队抱着 <strong>focus on the singleplayer experience</strong> 的错误想法来做，所以在需要集成多人玩法时就懵逼了。作者以他多年的经验告诉我们：<strong>debugging multiplayer games is hard</strong>。最后，看起来作者开了一个新坑，不过这个新的系列还没任何内容。</p>
<p><a href="http://www.gafferongames.com/networking-for-game-programmers/floating-point-determinism" target="_blank" rel="external">Floating Point Determinism</a> 这篇文章也是我过去曾经反复探寻过的一个问题，如何在不同平台间保证浮点数的确定性。</p>
<p>当时我想做一个 1v1 的双人对战物理游戏。很显然，不可能让两个玩家互相发送所有物理世界的数据，只能是发送玩家的操作和时间等数据，然后在两个客户端里分别模拟物理效果。但我在网上找了一大圈，没找到合适的解决方案，最后放弃了这个游戏的想法。</p>
<p>由于物理引擎依赖于大量的浮点计算，所以这个问题是实现网络物理游戏的关键。这篇文章，作者也没提出具体的解决方案，但他提供了大量他搜集和整理的资料供我们参考。</p>
<p>总结而言，跨平台的网络物理游戏，需要考虑处理器（AMD、Intel、ARM）、编译器，第三方库等各种问题，才能保证在不同平台（客户端和服务端肯定是不同平台）之间的浮点数确定性。</p>
<p>~</p>
<p>最后一篇，<a href="http://www.gafferongames.com/networking-for-game-programmers/what-every-programmer-needs-to-know-about-game-networking" target="_blank" rel="external">What Every Programmer Needs To Know About Game Networking</a> 介绍了一些网络游戏常用的同步策略，以及优化用户体验的方法。</p>
<p>文章里提到了两种基本的策略：</p>
<ul>
<li><p>Lockstep：在每一次游戏状态同步期间，都同步所有玩家的状态。这样做的好处是实现简单，但坏处则是任何一个玩家和服务器之间的网络连接不好，就会导致整个游戏世界停顿。</p>
</li>
<li><p>Client/Server：客户端只管把自己的操作发给服务端。服务端负责更新所有玩家的状态，然后广播给所有客户端。这样做的好处是客户端相当于一个只有输入和显示的哑终端，所有状态更新操作都在服务端进行。坏处就是由于客户端和服务端之间必然存在的网络延迟，玩家会觉得自己的操作总是要慢一拍才能反映在画面上。</p>
</li>
</ul>
<p>不过 Client/Server 策略结合客户端预测（Client-Side Prediction）技术，就可以很大程度上解决 Client/Server 策略的体验问题。</p>
<p>当玩家在客户端做出操作时，对于一些确定性的操作，例如前进、转身，客户端可以立即更新画面状态。当服务端返回的数据到达客户端时，通过计算时间差和比较状态，再来决定是维持客户端已经更新的状态，还是修正客户端的状态。</p>
<p>例如在 WOW 里，如果网速很差，我们经常会发现跑了一段路以后，却突然瞬移了一下位置。就是客户端根据服务端传回的数据对客户端状态进行了修正。</p>
<p>这篇文章虽然没有提到具体的方法，但为我们介绍了当今主流网游采用的数据同步策略。</p>
<p>~</p>
<p>总的来说，这个作者不但经验丰富，更是能把复杂的问题分解为相对容易理解的小块写成文章让读者看明白。</p>
<p>作者网站上还有大量与网络游戏相关的内容，还有一些相关的开源项目，建议对网络游戏有兴趣的同学深入发掘一下。</p>
<p>-EOF-</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直在学习网络游戏有关的内容。无意中发现一个极好的系列文章，由浅入深的讲解了网络游戏的很多基础知识和具体实现。&lt;/p&gt;
&lt;p&gt;这个系列文章原文发表在作者的个人网站上 &lt;a href=&quot;http://gafferongames.com/networking-for-game-programmers/&quot;&gt;http://gafferongames.com/networking-for-game-programmers/&lt;/a&gt; 。作者 Glenn Fiedler 在网络游戏领域是一位公认的专家，在游戏行业具有超过 15 年的经验。&lt;/p&gt;
&lt;p&gt;由于精力有限，我不可能全文翻译这个系列文章。所以我只选择一些重点来说明，相当于原文的读书笔记。&lt;/p&gt;
&lt;p&gt;这个系列文章分为几个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UDP 和 TCP 传输协议的区别，以及为什么应该选择 UDP&lt;/li&gt;
&lt;li&gt;如何在 UDP 之上实现自己的游戏通讯协议&lt;/li&gt;
&lt;li&gt;一些和网络游戏有关的扩展内容，例如浮点数的确定性和状态同步等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我按照自己的理解重新组织了一下文章的顺序，并介绍了每篇文章的重点。&lt;/p&gt;
    
    </summary>
    
      <category term="learn" scheme="http://liaoyulei.cn/categories/learn/"/>
    
    
      <category term="network" scheme="http://liaoyulei.cn/tags/network/"/>
    
      <category term="server" scheme="http://liaoyulei.cn/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>在 Github 上 fork 同一个仓库两次</title>
    <link href="http://liaoyulei.cn/2017/01/09/fork-same-repo-twice/"/>
    <id>http://liaoyulei.cn/2017/01/09/fork-same-repo-twice/</id>
    <published>2017-01-09T15:10:19.000Z</published>
    <updated>2017-01-09T15:25:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Github.com 上，一个账号只能 fork 同一个仓库一次。除非删除了之前 fork 的仓库，否则是没法打断这种 fork 联系的。</p>
<p>今天想了个办法解决此问题。</p>
<a id="more"></a>
<ol>
<li>注册一个新的 github.com 账号，fork 目标仓库。</li>
<li>将以前的 github.com 账号添加到该仓库的 Collaborators 中。</li>
<li>用以前的 github.com 账号来 clone 新 fork 的仓库。</li>
</ol>
<p>这样做的好处是可以继续用以前的 github.com 账号来提交。新的 github 账号仅仅用于 fork 操作。</p>
<p>简单粗暴！</p>
<p>-EOF-</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Github.com 上，一个账号只能 fork 同一个仓库一次。除非删除了之前 fork 的仓库，否则是没法打断这种 fork 联系的。&lt;/p&gt;
&lt;p&gt;今天想了个办法解决此问题。&lt;/p&gt;
    
    </summary>
    
      <category term="tips" scheme="http://liaoyulei.cn/categories/tips/"/>
    
    
      <category term="git" scheme="http://liaoyulei.cn/tags/git/"/>
    
      <category term="github" scheme="http://liaoyulei.cn/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>第一个 Netty 应用</title>
    <link href="http://liaoyulei.cn/2017/01/04/first-netty-app/"/>
    <id>http://liaoyulei.cn/2017/01/04/first-netty-app/</id>
    <published>2017-01-04T13:42:44.000Z</published>
    <updated>2017-01-05T06:22:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>跟着 <strong>Netty in Action</strong> 这本书学习 Netty，结果第一个 app 搞了两天都没跑起来，主要卡在 Gradle 编译这一块了。</p>
<p>这篇文章就详细记录了搭建开发环境和编译 Netty app 的详细步骤，免得以后又忘了。</p>
<a id="more"></a>
<h2 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h2><p>基本步骤:</p>
<ol>
<li><p>从 <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a> 下载 JDK 最新版本装好。</p>
</li>
<li><p>访问 <a href="http://sdkman.io/install.html" target="_blank" rel="external">http://sdkman.io/install.html</a> 页面，按照步骤安装 SDKMAN，然后重启终端。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">curl <span class="_">-s</span> <span class="string">"https://get.sdkman.io"</span> | bash</div></pre></td></tr></table></figure>
</li>
<li><p>安装 Gradle。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sdk install gradle</div></pre></td></tr></table></figure>
</li>
</ol>
<p>以上步骤如果下载很慢，请默念“FXXK GFW”一百遍！</p>
<h2 id="建立工程结构"><a href="#建立工程结构" class="headerlink" title="建立工程结构"></a>建立工程结构</h2><p>新建一个空白目录，在其中执行（如果这一步出错，说明 gradle 版本太老）:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">gradle init --type java-appliaction</div></pre></td></tr></table></figure>
<p>执行后就得到一个基本的 java app 工程结构了。</p>
<p>现在打开 <code>build.gradle</code>，修改依赖为:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile <span class="symbol">'io</span>.netty:netty-microbench:<span class="number">4.1</span><span class="number">.6</span>.<span class="type">Final</span>'</div><div class="line"></div><div class="line">    <span class="comment">// Use JUnit test framework</span></div><div class="line">    testCompile <span class="symbol">'junit</span>:junit:<span class="number">4.12</span>'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">gradle run</div></pre></td></tr></table></figure>
<p>如果一切正常，会看到执行结果 <code>Hello world.</code> 。</p>
<h2 id="创建-Netty-Server"><a href="#创建-Netty-Server" class="headerlink" title="创建 Netty Server"></a>创建 Netty Server</h2><p>这里我们选用 <strong>Netty in Action</strong> 里第二章的 EchoServer 示例来实践。</p>
<ol>
<li><p>在工程目录 <code>src/main/java/</code> 中建立子目录 <code>nettyapp/</code>。</p>
</li>
<li><p>从 <a href="https://github.com/normanmaurer/netty-in-action" target="_blank" rel="external">https://github.com/normanmaurer/netty-in-action</a> 下载所有源代码，并解压缩。</p>
</li>
<li><p>将 <code>src/main/java/com/manning/nettyinaction/chapter2/</code> 中的所有文件复制到我们工程 <code>src/main/java/nettyapp/</code> 目录中。</p>
</li>
<li><p>删除 <code>src/main/java/App.java</code> 文件。</p>
</li>
<li><p>修改所有文件的 <code>package</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">package</span> com.manning.nettyinaction.chapter2;</div></pre></td></tr></table></figure>
<p>修改为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">package</span> nettyapp;</div></pre></td></tr></table></figure>
</li>
<li><p>修改 <code>src/main/java/nettyapp/EchoServer.java</code> 的 <code>main()</code> 方法为:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">new</span> EchoServer(<span class="number">8080</span>).start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>修改 <code>build.gradle</code>:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><div class="line">mainClassName = <span class="symbol">'nettyapp</span>.<span class="type">EchoServer</span>'</div></pre></td></tr></table></figure>
</li>
<li><p>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">gradle run</div></pre></td></tr></table></figure>
<p>如果显示 <code>nettyapp.EchoServer started and listen on /0:0:0:0:0:0:0:0:8080</code> 表示我们的 netty app 已经跑起来了。</p>
</li>
</ol>
<p>如果需要分发编译好的 netty app，执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">gradle distZip</div></pre></td></tr></table></figure>
<p>可以将 netty app 打包为 .zip 文件，并且包含各种环境下需要的启动脚本和支持库。</p>
<p>-EOF-</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;跟着 &lt;strong&gt;Netty in Action&lt;/strong&gt; 这本书学习 Netty，结果第一个 app 搞了两天都没跑起来，主要卡在 Gradle 编译这一块了。&lt;/p&gt;
&lt;p&gt;这篇文章就详细记录了搭建开发环境和编译 Netty app 的详细步骤，免得以后又忘了。&lt;/p&gt;
    
    </summary>
    
      <category term="guide" scheme="http://liaoyulei.cn/categories/guide/"/>
    
    
      <category term="java" scheme="http://liaoyulei.cn/tags/java/"/>
    
      <category term="netty" scheme="http://liaoyulei.cn/tags/netty/"/>
    
  </entry>
  
  <entry>
    <title>为 PHP 内置 WebServer 提供目录和文件索引</title>
    <link href="http://liaoyulei.cn/2016/12/24/php-builtin-webserver-indexfiles/"/>
    <id>http://liaoyulei.cn/2016/12/24/php-builtin-webserver-indexfiles/</id>
    <published>2016-12-24T13:06:46.000Z</published>
    <updated>2016-12-24T14:09:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>PHP 5.x 开始提供了一个简单的内置 WebServer，方便大家在没有安装 Apache 的情况下调试 PHP 代码。</p>
<p>要启动这个内置 WebServer 很简单，但它不能显示目录和文件索引，稍微有点不方便。本文提供了一个简单的实现。</p>
<a id="more"></a>
<p>使用方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">php -S localhost:8080 webindex.php</div></pre></td></tr></table></figure>
<p>然后打开浏览器访问 <code>localhost:8080</code> 即可以当前目录为根目录，显示目录列表和文件列表，并且可以在子目录中跳转。</p>
<p>实际运行效果：</p>
<img src="/2016/12/24/php-builtin-webserver-indexfiles/webindex-screenshot.png" alt="webindex-screenshot.png" title="">
<p>~</p>
<p>参考来源：<a href="https://github.com/JBlond/php-built-in-webserver-router-script" target="_blank" rel="external">https://github.com/JBlond/php-built-in-webserver-router-script</a></p>
<p>我编写的版本：<a href="https://gist.github.com/dualface/70b62fc30b076026d0a8c87385eedebe" target="_blank" rel="external">https://gist.github.com/dualface/70b62fc30b076026d0a8c87385eedebe</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">date_default_timezone_set(<span class="string">'UTC'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getfilesize</span><span class="params">($path)</span> </span>&#123;</div><div class="line">    $size = ceil(filesize($path)) . <span class="string">''</span>;</div><div class="line">    <span class="keyword">return</span> str_repeat(<span class="string">' '</span>, <span class="number">8</span> - strlen($size)) . $size . <span class="string">' KB'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printlog</span><span class="params">($status = <span class="number">200</span>)</span> </span>&#123;</div><div class="line">    $time = date(<span class="string">'D M j H:i:s Y'</span>);</div><div class="line">    $addr = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</div><div class="line">    $port = $_SERVER[<span class="string">'REMOTE_PORT'</span>];</div><div class="line">    $uri = $_SERVER[<span class="string">'REQUEST_URI'</span>];</div><div class="line">    $log = sprintf(<span class="string">"[%s] %s:%s [%s]: %s\n"</span>, $time, $addr, $port, $status, $uri);</div><div class="line">    file_put_contents(<span class="string">'php://stdout'</span>, $log);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo_h</span><span class="params">($t)</span> </span>&#123;</div><div class="line">    <span class="keyword">echo</span> htmlspecialchars($t);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dumpfile</span><span class="params">($path)</span> </span>&#123;</div><div class="line">    $name = htmlspecialchars(pathinfo($path, PATHINFO_BASENAME));</div><div class="line">    <span class="keyword">echo</span> <span class="string">&lt;&lt;&lt;EOT</span></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;title&gt;<span class="subst">&#123;$name&#125;</span>&lt;/title&gt;</div><div class="line">&lt;meta charset="utf-8" /&gt;</div><div class="line">&lt;style&gt;</div><div class="line">pre &#123;</div><div class="line">    font-size: 14px;</div><div class="line">    width: 80em;</div><div class="line">    white-space: pre-wrap;</div><div class="line">    white-space: -moz-pre-wrap;</div><div class="line">    white-space: -pre-wrap;</div><div class="line">    white-space: -o-pre-wrap;</div><div class="line">    word-wrap: break-word;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;pre&gt;</div><div class="line">EOT;</div><div class="line"></div><div class="line">echo_h(file_get_contents($path));</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">&lt;&lt;&lt;EOT</span></div><div class="line">&lt;/pre&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line"></div><div class="line">EOT;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// start</span></div><div class="line"></div><div class="line">$uri = parse_url($_SERVER[<span class="string">'REQUEST_URI'</span>], PHP_URL_PATH);</div><div class="line">$path = $_SERVER[<span class="string">'DOCUMENT_ROOT'</span>] . $uri;</div><div class="line"><span class="keyword">if</span> (!file_exists($path)) &#123;</div><div class="line">    printlog(<span class="number">404</span>);</div><div class="line">    http_response_code(<span class="number">404</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$dump_exts = <span class="keyword">array</span>(</div><div class="line">    <span class="string">'txt'</span>, <span class="string">'text'</span>, <span class="string">'md'</span>, <span class="string">'mdown'</span>, <span class="string">'markdown'</span>, <span class="string">'json'</span>,</div><div class="line">    <span class="string">'c'</span>, <span class="string">'cpp'</span>, <span class="string">'h'</span>, <span class="string">'hpp'</span>, <span class="string">'m'</span>, <span class="string">'mm'</span>, <span class="string">'lua'</span>, <span class="string">'py'</span></div><div class="line">);</div><div class="line"><span class="keyword">if</span> (!is_dir($path)) &#123;</div><div class="line">    $ext = strtolower(pathinfo($path, PATHINFO_EXTENSION));</div><div class="line">    <span class="keyword">if</span> ($ext == <span class="string">''</span> || in_array($ext, $dump_exts)) &#123;</div><div class="line">        printlog();</div><div class="line">        dumpfile($path);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// let server handle file</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$this_dir = substr($_SERVER[<span class="string">'PHP_SELF'</span>], <span class="number">0</span>, strrpos($_SERVER[<span class="string">'PHP_SELF'</span>], <span class="string">'/'</span>) + <span class="number">1</span>);</div><div class="line">$dir = $_SERVER[<span class="string">'DOCUMENT_ROOT'</span>] . $this_dir;</div><div class="line"><span class="keyword">if</span> (!is_dir($dir)) &#123;</div><div class="line">    printlog(<span class="number">404</span>);</div><div class="line">    http_response_code(<span class="number">404</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$folder = opendir($dir);</div><div class="line"><span class="keyword">if</span> (!readdir($folder)) &#123;</div><div class="line">    printlog(<span class="number">404</span>);</div><div class="line">    http_response_code(<span class="number">404</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$files = <span class="keyword">array</span>();</div><div class="line"><span class="keyword">while</span> ($file = readdir($folder)) &#123;</div><div class="line">    $base = $this_dir == <span class="string">'/'</span> ? <span class="string">''</span> : $this_dir;</div><div class="line">    $ext = pathinfo($file, PATHINFO_EXTENSION);</div><div class="line">    $path = $dir . DIRECTORY_SEPARATOR . $file;</div><div class="line">    $filesize = getfilesize($path);</div><div class="line">    $time = date(<span class="string">'d-M-Y H:i:s'</span>, filemtime($path));</div><div class="line">    $is_dir = is_dir($path);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (substr($file, <span class="number">0</span>, <span class="number">1</span>) == <span class="string">'.'</span>) <span class="keyword">continue</span>;</div><div class="line"></div><div class="line">    $files[] = <span class="keyword">array</span>(</div><div class="line">        <span class="string">'name'</span> =&gt; $is_dir ? $file . <span class="string">'/'</span> : $file,</div><div class="line">        <span class="string">'ext'</span> =&gt; $ext,</div><div class="line">        <span class="string">'size'</span> =&gt; $filesize,</div><div class="line">        <span class="string">'time'</span> =&gt; $time,</div><div class="line">        <span class="string">'is_dir'</span> =&gt; $is_dir</div><div class="line">    );</div><div class="line">&#125;</div><div class="line"></div><div class="line">usort($files, <span class="function"><span class="keyword">function</span><span class="params">($a, $b)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> ($a[<span class="string">'is_dir'</span>]) &#123;</div><div class="line">        <span class="keyword">if</span> ($b[<span class="string">'is_dir'</span>]) &#123;</div><div class="line">            <span class="keyword">return</span> $a[<span class="string">'name'</span>] &lt; $b[<span class="string">'name'</span>] ? <span class="number">-1</span> : <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ($b[<span class="string">'is_dir'</span>]) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $a[<span class="string">'name'</span>] &lt; $b[<span class="string">'name'</span>] ? <span class="number">-1</span> : <span class="number">1</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$name_len = <span class="number">50</span>;</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;title&gt;<span class="meta">&lt;?php</span> echo_h($this_dir); <span class="meta">?&gt;</span>&lt;/title&gt;</div><div class="line">&lt;meta charset=<span class="string">"utf-8"</span> /&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;h1&gt;Index of <span class="meta">&lt;?php</span> echo_h($this_dir); <span class="meta">?&gt;</span>&lt;/h1&gt;</div><div class="line"></div><div class="line">&lt;pre&gt;</div><div class="line">    Last modified               Size  Name</div><div class="line">&lt;hr /&gt;<span class="meta">&lt;?php</span> <span class="keyword">if</span> ($this_dir != <span class="string">'/'</span>): <span class="meta">?&gt;</span></div><div class="line">[D] &lt;a href=<span class="string">".."</span>&gt;<span class="keyword">Parent</span> Directory&lt;/a&gt;</div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">endif</span>;</div><div class="line"><span class="keyword">foreach</span> ($files <span class="keyword">as</span> $file):</div><div class="line">    $dirflag = $file[<span class="string">'is_dir'</span>] ? <span class="string">'[D]'</span> : <span class="string">'   '</span>;</div><div class="line">    $prefix = sprintf(<span class="string">'%s %s %s'</span>, $dirflag, $file[<span class="string">'time'</span>], $file[<span class="string">'size'</span>]);</div><div class="line">    $name = $file[<span class="string">'name'</span>];</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $prefix; <span class="meta">?&gt;</span>  &lt;a href=<span class="string">"&lt;?php echo_h($name); ?&gt;"</span>&gt;<span class="meta">&lt;?php</span> echo_h($name); <span class="meta">?&gt;</span>&lt;/a&gt;</div><div class="line"><span class="meta">&lt;?php</span> <span class="keyword">endforeach</span>; <span class="meta">?&gt;</span></div><div class="line">&lt;/pre&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>-EOF-</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PHP 5.x 开始提供了一个简单的内置 WebServer，方便大家在没有安装 Apache 的情况下调试 PHP 代码。&lt;/p&gt;
&lt;p&gt;要启动这个内置 WebServer 很简单，但它不能显示目录和文件索引，稍微有点不方便。本文提供了一个简单的实现。&lt;/p&gt;
    
    </summary>
    
      <category term="tips" scheme="http://liaoyulei.cn/categories/tips/"/>
    
    
      <category term="php" scheme="http://liaoyulei.cn/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>用 PHP 创建中文 PDF 的最简单方法</title>
    <link href="http://liaoyulei.cn/2016/12/24/create-chinese-pdf/"/>
    <id>http://liaoyulei.cn/2016/12/24/create-chinese-pdf/</id>
    <published>2016-12-24T06:25:05.000Z</published>
    <updated>2016-12-24T07:40:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要用 PHP 创建包含中文的 PDF，网上搜了不少资料，都提到需要自己创建字体等步骤。但经过我试验，其实利用 TCPDF 及其自带的字体定义文件，创建包含中文的 PDF 可以说易如反掌。</p>
<a id="more"></a>
<p>首先下载最新版本的 TCPDF，下载地址：<a href="https://github.com/tecnickcom/TCPDF/releases" target="_blank" rel="external">https://github.com/tecnickcom/TCPDF/releases</a> 。</p>
<p>然后创建一个新的 <code>create-pdf.php</code> 文件，输入以下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// filename: create-pdf.php</span></div><div class="line"></div><div class="line"><span class="comment">// 设置 PHP 脚本的执行时的内存限制为 256M，因为中文字体的定义需要消耗大量内存</span></div><div class="line">ini_set(<span class="string">'memory_limit'</span>, <span class="string">'256M'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 设置默认时区</span></div><div class="line">date_default_timezone_set(<span class="string">'Asia/Shanghai'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 载入 TCPDF 库</span></div><div class="line"><span class="keyword">require</span> (<span class="string">'tcpdf.php'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 创建一个新 PDF 文档</span></div><div class="line">$pdf = <span class="keyword">new</span> TCPDF(<span class="string">'Portrait'</span>, <span class="string">'mm'</span>, <span class="string">'A4'</span>, <span class="keyword">true</span>, <span class="string">'UTF-8'</span>);</div><div class="line"><span class="comment">// 添加页面</span></div><div class="line">$pdf-&gt;AddPage();</div><div class="line"><span class="comment">// 设置字体为 TCPDF 内置的 cid0cs，也就是 CID-0 Chinese Simplified</span></div><div class="line">$pdf-&gt;SetFont(<span class="string">'cid0cs'</span>, <span class="string">''</span>, <span class="number">14</span>);</div><div class="line"></div><div class="line"><span class="comment">// 定义要输出的内容</span></div><div class="line">$html = <span class="string">&lt;&lt;&lt;TEXT</span></div><div class="line"></div><div class="line">&lt;h1&gt;Welcome to  &lt;a href="http://www.tcpdf.org" style="text-decoration:none;background-color:#CC0000;color:black;"&gt;&amp;nbsp;&lt;span style="color:black;"&gt;TC&lt;/span&gt;&lt;span style="color:white;"&gt;PDF&lt;/span&gt;&amp;nbsp;&lt;/a&gt;!&lt;/h1&gt;</div><div class="line"></div><div class="line">&lt;p&gt;就像西文 typography 中已经相对成熟的 kerning，中文也需要同样的东西。很自然地，中文字符与西文字符交替出现的时候，也需要合适的 kerning。然而问题是目前的计算机字体，在这方面的设计很差。在网页的文本中，利用手工添加空格的方式，一定程度上，可以起到调整中英文字偶之间的空隙，然而这终究是个临时的「折衷」办法。类似的「空格折衷」，在机械打字机普及的时代，有更多例子。&lt;/p&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;backquote&gt;</div><div class="line">以上内容来自：&lt;a href="https://www.zhihu.com/question/19587406"&gt;https://www.zhihu.com/question/19587406&lt;/a&gt;</div><div class="line">&lt;/backquote&gt;</div><div class="line"></div><div class="line">&lt;p&gt;This text is printed using the &lt;i&gt;writeHTMLCell()&lt;/i&gt; method but you can also use: &lt;i&gt;Multicell(), writeHTML(), Write(), Cell() and Text()&lt;/i&gt;.&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;p&gt;Please check the source code documentation and other examples for further information.&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;p style="color:#CC0000;"&gt;TO IMPROVE AND EXPAND TCPDF I NEED YOUR SUPPORT, PLEASE &lt;a href="http://sourceforge.net/donate/index.php?group_id=128076"&gt;MAKE A DONATION!&lt;/a&gt;&lt;/p&gt;</div><div class="line"></div><div class="line">TEXT;</div><div class="line"></div><div class="line"><span class="comment">// 以 HTML 方式输出内容</span></div><div class="line">$pdf-&gt;writeHTMLCell(<span class="number">0</span>, <span class="number">0</span>, <span class="string">''</span>, <span class="string">''</span>, $html, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="keyword">true</span>, <span class="string">''</span>, <span class="keyword">true</span>);</div><div class="line"></div><div class="line"><span class="comment">// 将输出结果为与 .php 文件同目录的 example_001.pdf</span></div><div class="line">$pdf-&gt;Output(<span class="keyword">__DIR__</span> . <span class="string">'/example_001.pdf'</span>, <span class="string">'F'</span>);</div></pre></td></tr></table></figure>
<p>在命令行中执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ php create-pdf.php</div></pre></td></tr></table></figure>
<p>上面的代码就可以输出漂亮的中英文混排 PDF 了。</p>
<img src="/2016/12/24/create-chinese-pdf/example_001.png" alt="example_001.png" title="">
<p>当然，这个方法也有缺点：</p>
<ul>
<li>在没有中文字体的系统里无法显示中文</li>
<li>中文字体会使用系统的默认中文字体，所以在不同系统里看上去会有一点差异</li>
<li>只有一种中文字体</li>
</ul>
<p>但是，这个方法最大的好处不就是“简单”吗！</p>
<p>-EOF-</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近需要用 PHP 创建包含中文的 PDF，网上搜了不少资料，都提到需要自己创建字体等步骤。但经过我试验，其实利用 TCPDF 及其自带的字体定义文件，创建包含中文的 PDF 可以说易如反掌。&lt;/p&gt;
    
    </summary>
    
      <category term="tips" scheme="http://liaoyulei.cn/categories/tips/"/>
    
    
      <category term="php" scheme="http://liaoyulei.cn/tags/php/"/>
    
      <category term="pdf" scheme="http://liaoyulei.cn/tags/pdf/"/>
    
  </entry>
  
  <entry>
    <title>[视频] PHP 使用 Redis 入门</title>
    <link href="http://liaoyulei.cn/2016/12/23/php-redis-intro/"/>
    <id>http://liaoyulei.cn/2016/12/23/php-redis-intro/</id>
    <published>2016-12-22T16:01:45.000Z</published>
    <updated>2016-12-22T16:03:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>录了一个 PHP 使用 Redis 的入门视频。</p>
<p>传送门： <a href="http://v.youku.com/v_show/id_XMTg3NzQ3MTAwOA==.html" target="_blank" rel="external">http://v.youku.com/v_show/id_XMTg3NzQ3MTAwOA==.html</a></p>
<p>-EOF-</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;录了一个 PHP 使用 Redis 的入门视频。&lt;/p&gt;
&lt;p&gt;传送门： &lt;a href=&quot;http://v.youku.com/v_show/id_XMTg3NzQ3MTAwOA==.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://
    
    </summary>
    
      <category term="videos" scheme="http://liaoyulei.cn/categories/videos/"/>
    
    
      <category term="php" scheme="http://liaoyulei.cn/tags/php/"/>
    
      <category term="redis" scheme="http://liaoyulei.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>在 iOS 中将 HTML5 App 封装为原生应用</title>
    <link href="http://liaoyulei.cn/2016/12/21/wrap-html5-ios-native/"/>
    <id>http://liaoyulei.cn/2016/12/21/wrap-html5-ios-native/</id>
    <published>2016-12-21T09:27:07.000Z</published>
    <updated>2016-12-22T16:00:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>HTML5 App 相比 Native App 有一些突出的优势，但有时候我们希望能够把这些 HTML5 App 封装为 iOS Native App。</p>
<p>本文描述了一种最简单的方案，演示了如何将一个 PixiJS 的 HTML5 App 封装为 iOS Native App。</p>
<a id="more"></a>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>从 iOS 8 开始，Apple 为了让嵌入 HTML5 的应用程序能够获得更好的性能表现，提供了一个新的系统组件 <code>WKWebView</code>。这个 <code>WKWebView</code> 与以前的 <code>UIWebView</code> 相比，最大的改变就是支持 iOS 的高性能 JavaScript 虚拟机，所以在性能上可以保持和 iOS Safari 浏览器同样的表现。</p>
<p>我们的原生封装就是在一个 iOS Native App 里使用 <code>WKWebView</code> 来跑 PixiJS。</p>
<p>但光有 <code>WKWebView</code> 还不行，因为 <code>WKWebView</code> 里因为安全限制，是不能直接读取 App 内部的资源和脚本的。所以我们还需要在 App 里嵌入一个 HTTP Server。</p>
<p>幸运的是已经有开发者创建了一个可以嵌入 iOS Native App 的 HTTP Server 组件。这个组件名为 <code>GCDWebServer</code>，项目地址是 <a href="https://github.com/swisspol/GCDWebServer" target="_blank" rel="external">https://github.com/swisspol/GCDWebServer</a>。</p>
<p><code>GCDWebServer</code> 简单易用，占用的资源也极少，非常符合我们的需求。</p>
<p>所以我们的基本思路就是：</p>
<ul>
<li>在 iOS Native App 里创建一个 HTTP Server。</li>
<li>再创建一个 <code>WKWebView</code>。</li>
<li>让 <code>WKWebView</code> 从内部的 HTTP Server 读取内容并执行，从而把我们的 HTML5 内容跑起来。</li>
</ul>
<p>~</p>
<h2 id="创建-iOS-Native-App"><a href="#创建-iOS-Native-App" class="headerlink" title="创建 iOS Native App"></a>创建 iOS Native App</h2><p>打开 Xcode，选择新建一个 <code>iOS Single View Application</code>，命名为 <code>PixiJS Native</code>。</p>
<p>从 <a href="https://github.com/swisspol/GCDWebServer/releases" target="_blank" rel="external">https://github.com/swisspol/GCDWebServer/releases</a> 下载 <code>GCDWebServer</code> 的最新版本并解压缩。</p>
<p>将解压缩得到的 <code>GCDWebServer</code> 目录复制到新建项目里，并添加到工程中。完成后应该如下图：</p>
<img src="/2016/12/21/wrap-html5-ios-native/add-gcdwebserver-files.png" alt="添加 GCDWebServer 文件到工程中" title="添加 GCDWebServer 文件到工程中">
<p>并且在工程中添加下列 <code>Frameworks</code>:</p>
<ul>
<li>libxml2.tbd</li>
<li>libz.tbd</li>
</ul>
<img src="/2016/12/21/wrap-html5-ios-native/add-frameworks.png" alt="添加编译工程需要的 Frameworks" title="添加编译工程需要的 Frameworks">
<p>确保工程可以正常编译。</p>
<p>~</p>
<h2 id="添加-Native-代码"><a href="#添加-Native-代码" class="headerlink" title="添加 Native 代码"></a>添加 Native 代码</h2><p>打开 <code>ViewController.m</code>，增加：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"WebKit/WebKit.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"GCDWebServer/Core/GCDWebServer.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#define LOCAL_PORT 29033</span></div></pre></td></tr></table></figure>
<p>修改 <code>viewDidLoad</code> 方法为：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line"></div><div class="line">    <span class="built_in">WKWebView</span> *webView = [[<span class="built_in">WKWebView</span> alloc] initWithFrame:<span class="keyword">self</span>.view.bounds];</div><div class="line">    [<span class="keyword">self</span>.view addSubview:webView];</div><div class="line"></div><div class="line">    <span class="keyword">id</span> basedir = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@/src"</span>,</div><div class="line">                  [[<span class="built_in">NSBundle</span> mainBundle] resourcePath]];</div><div class="line"></div><div class="line">    GCDWebServer* webServer = [[GCDWebServer alloc] init];</div><div class="line">    [webServer addGETHandlerForBasePath:<span class="string">@"/"</span></div><div class="line">                          directoryPath:basedir</div><div class="line">                          indexFilename:<span class="string">@"index.html"</span></div><div class="line">                               cacheAge:<span class="number">0</span></div><div class="line">                     allowRangeRequests:<span class="literal">YES</span>];</div><div class="line"></div><div class="line">    <span class="comment">//DEBUG = 0</span></div><div class="line">    <span class="comment">//VERBOSE = 1</span></div><div class="line">    <span class="comment">//INFO = 2</span></div><div class="line">    <span class="comment">//WARNING = 3</span></div><div class="line">    <span class="comment">//ERROR = 4</span></div><div class="line">    [GCDWebServer setLogLevel:<span class="number">0</span>];</div><div class="line">    <span class="keyword">id</span> options = [<span class="built_in">NSMutableDictionary</span> dictionary];</div><div class="line">    [options setObject:[<span class="built_in">NSNumber</span> numberWithInteger:LOCAL_PORT]</div><div class="line">                forKey:GCDWebServerOption_Port];</div><div class="line">    [options setObject:[<span class="built_in">NSNumber</span> numberWithBool:<span class="literal">YES</span>]</div><div class="line">                forKey:GCDWebServerOption_BindToLocalhost];</div><div class="line">    [webServer startWithOptions:options error:<span class="literal">nil</span>];</div><div class="line"></div><div class="line">    <span class="keyword">id</span> urlStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"http://127.0.0.1:%d/"</span>, LOCAL_PORT];</div><div class="line">    <span class="keyword">id</span> url = [<span class="built_in">NSURL</span> URLWithString:urlStr];</div><div class="line">    <span class="keyword">id</span> request = [[<span class="built_in">NSURLRequest</span> alloc] initWithURL:url];</div><div class="line">    [webView loadRequest:request];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这一段代码分为几个部分：</p>
<ol>
<li>创建一个 <code>WKWebView</code>，并且填满整个显示空间。</li>
<li>将 App 里的 <code>src</code> 目录作为 HTML5 内容的根目录。</li>
<li>创建一个 <code>GCDWebServer</code> 对象实例，并设置根目录、默认文件、缓存策略等。这里 <code>cacheAge</code> 设置为 0 是让每次应用启动都可以确保读取到最新的内容。</li>
<li>让 WebServer 监听本机的指定端口号，这样从外部是无法访问 WebServer 的，确保了安全。</li>
<li>最后，让 <code>WKWebView</code> 访问本机 WebServer 的地址。</li>
</ol>
<p>~</p>
<h2 id="添加-HTML5-内容"><a href="#添加-HTML5-内容" class="headerlink" title="添加 HTML5 内容"></a>添加 HTML5 内容</h2><p>在项目目录里新建一个 <code>src</code> 目录，放入要运行的 HTML5 内容。</p>
<p>然后将 <code>src</code> 目录拖动到 Xcode 工程中，并且选择 <code>Create folder references</code>：</p>
<img src="/2016/12/21/wrap-html5-ios-native/add-src-folder.png" alt="添加 src 目录为引用" title="添加 src 目录为引用">
<p>添加完成后，<code>src</code> 目录在 Xcode 工程里的图标应该是蓝色的。</p>
<p>如果一切顺利，此时执行工程应该就可以在模拟器或者 iPhone 上看到我们的 HTML5 内容了。</p>
<img src="/2016/12/21/wrap-html5-ios-native/run.jpg" alt="运行效果" title="运行效果">
<p>~</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文提供的方案简单易行，但也存在一个主要的问题。那就是运行在 Native App 里的 HTML5 内容无法访问一些 iOS 原生接口，例如 IAP。</p>
<p>这个问题的解决方案：</p>
<ul>
<li>自己对这些 iOS 原生接口封装为 JavaScript 接口，给 HTML5 内容调用。</li>
<li>使用 PhoneGap 等现成的框架，它们已经封装了大部分常用的 iOS 原生接口。</li>
</ul>
<p>最后，完整的工程可以从 <a href="https://github.com/dualface/wrap-html5-ios-native" target="_blank" rel="external">https://github.com/dualface/wrap-html5-ios-native</a> 下载。</p>
<p>-EOF-</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTML5 App 相比 Native App 有一些突出的优势，但有时候我们希望能够把这些 HTML5 App 封装为 iOS Native App。&lt;/p&gt;
&lt;p&gt;本文描述了一种最简单的方案，演示了如何将一个 PixiJS 的 HTML5 App 封装为 iOS Native App。&lt;/p&gt;
    
    </summary>
    
      <category term="tips" scheme="http://liaoyulei.cn/categories/tips/"/>
    
    
      <category term="ios" scheme="http://liaoyulei.cn/tags/ios/"/>
    
      <category term="html5" scheme="http://liaoyulei.cn/tags/html5/"/>
    
      <category term="javascript" scheme="http://liaoyulei.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>在 Mac 下配置 Visual Studio Code 为 Unity 代码编辑器</title>
    <link href="http://liaoyulei.cn/2016/12/21/unity-vscode/"/>
    <id>http://liaoyulei.cn/2016/12/21/unity-vscode/</id>
    <published>2016-12-21T03:29:44.000Z</published>
    <updated>2017-01-09T15:23:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>Unity 虽然附带了一个 MonoDevelop 作为代码编辑器，但是这个编辑器并不好用。经过半天折腾，把 Visual Studio Code 打造成了 Unity 的代码编辑器，用起来倍儿爽！</p>
<p>[2017-01-09 更新]</p>
<a id="more"></a>
<p>首先，下载并安装 Visual Studio Code（后文简称 VSC）和 Mono Framework：</p>
<ul>
<li>Visual Studio Code: <a href="https://code.visualstudio.com/Download" target="_blank" rel="external">https://code.visualstudio.com/Download</a></li>
<li>Mono Framework 4.x: <a href="http://www.mono-project.com/download/" target="_blank" rel="external">http://www.mono-project.com/download/</a></li>
</ul>
<p>~</p>
<p>启动 VSC 后，从左侧选择 Extensions 标签，安装下列扩展：</p>
<ul>
<li>C#: 对 C# 代码和工程提供全面支持。</li>
<li>Debugger for Unity: 用来调试 Unity 工程的，如果不用调试功能，这个扩展不用装。</li>
<li>Unity Tools: 这个扩展是可选的。但其中有一个功能相当方便。选中关键字按 <code>CMD+&#39;</code> 键就可以在线查找 Unity 文档。</li>
<li>Unity Snippets: 这个扩展是可选的。可以快速创建 <code>Start</code>、<code>Update</code> 等常用方法的片段。</li>
</ul>
<p>安装完所有扩展，需要重启 VSC。</p>
<p>~</p>
<p>安装完成上述插件后，我们还需要在 Unity 中安装一个 VSC 插件：</p>
<ul>
<li>启动 Unity 打开工程</li>
<li>从 Assets Store 搜索 <code>VSCode</code> (<a href="http://u3d.as/jmM" target="_blank" rel="external">http://u3d.as/jmM</a>)，将这个插件导入到工程中</li>
<li>打开 Unity 首选项，选中 VSCode 标签后，选中 <code>Enable Integration</code> 和 <code>Use Unity Debugger</code> 选项</li>
<li>选择菜单 <code>Assets / Open C# Project In Code</code> 即可在 VSC 中打开 Unity 工程</li>
</ul>
<img src="/2016/12/21/unity-vscode/unity-preferences.png" alt="unity-preferences.png" title="">
<p>~</p>
<p>如何通过 VSC 调试 Unity 工程：</p>
<ul>
<li>在 VSC 中选中 Debugger 标签</li>
<li>如果 <code>launch.json</code> 文件已经存在，需要先删除</li>
<li>点击项目顶部的齿轮按钮，选择 “Unity Debugger” 添加 <code>launch.json</code> 文件到项目中</li>
<li>从 Debugger 列表中选择 “Unity Editor”</li>
<li>在源代码编辑窗口中，点击左侧行号设置断点</li>
<li>点击 Start Debugging 箭头按钮</li>
<li>切换到 Unity，点击运行游戏</li>
<li>切换回 VSCode，即可在断点处进行调试</li>
</ul>
<img src="/2016/12/21/unity-vscode/vscode-debugger.png" alt="vscode-debugger.png" title="">
<p>-EOF-</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Unity 虽然附带了一个 MonoDevelop 作为代码编辑器，但是这个编辑器并不好用。经过半天折腾，把 Visual Studio Code 打造成了 Unity 的代码编辑器，用起来倍儿爽！&lt;/p&gt;
&lt;p&gt;[2017-01-09 更新]&lt;/p&gt;
    
    </summary>
    
      <category term="tips" scheme="http://liaoyulei.cn/categories/tips/"/>
    
    
      <category term="unity" scheme="http://liaoyulei.cn/tags/unity/"/>
    
      <category term="vscode" scheme="http://liaoyulei.cn/tags/vscode/"/>
    
      <category term="tools" scheme="http://liaoyulei.cn/tags/tools/"/>
    
      <category term="c#" scheme="http://liaoyulei.cn/tags/c/"/>
    
  </entry>
  
</feed>
